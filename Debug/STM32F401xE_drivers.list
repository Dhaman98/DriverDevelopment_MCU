
STM32F401xE_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000233c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080024dc  080024dc  000124dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025dc  080025dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080025dc  080025dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025dc  080025dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025dc  080025dc  000125dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080025e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08002654  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08002654  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002880  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ac3  00000000  00000000  00022963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000340  00000000  00000000  00023428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000025b  00000000  00000000  00023768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003d86  00000000  00000000  000239c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003bf9  00000000  00000000  00027749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cedf  00000000  00000000  0002b342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000140c  00000000  00000000  00038224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00039630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080024c4 	.word	0x080024c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080024c4 	.word	0x080024c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <init_systick_timer>:
/* Enable this macro if you want to test RTC on LCD */
//#define PRINT_LCD


void init_systick_timer(uint32_t tick_hz)
{
 8000280:	b480      	push	{r7}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <init_systick_timer+0x60>)
 800028a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <init_systick_timer+0x64>)
 800028e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000290:	4a15      	ldr	r2, [pc, #84]	; (80002e8 <init_systick_timer+0x68>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	fbb2 f3f3 	udiv	r3, r2, r3
 8000298:	3b01      	subs	r3, #1
 800029a:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	431a      	orrs	r2, r3
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f043 0202 	orr.w	r2, r3, #2
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f043 0204 	orr.w	r2, r3, #4
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f043 0201 	orr.w	r2, r3, #1
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	601a      	str	r2, [r3, #0]

}
 80002d2:	bf00      	nop
 80002d4:	371c      	adds	r7, #28
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e014 	.word	0xe000e014
 80002e4:	e000e010 	.word	0xe000e010
 80002e8:	00f42400 	.word	0x00f42400

080002ec <get_day_of_week>:


char* get_day_of_week(uint8_t i)
{
 80002ec:	b4b0      	push	{r4, r5, r7}
 80002ee:	b08b      	sub	sp, #44	; 0x2c
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <get_day_of_week+0x38>)
 80002f8:	f107 040c 	add.w	r4, r7, #12
 80002fc:	461d      	mov	r5, r3
 80002fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000302:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000306:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	3b01      	subs	r3, #1
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	3328      	adds	r3, #40	; 0x28
 8000312:	443b      	add	r3, r7
 8000314:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000318:	4618      	mov	r0, r3
 800031a:	372c      	adds	r7, #44	; 0x2c
 800031c:	46bd      	mov	sp, r7
 800031e:	bcb0      	pop	{r4, r5, r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	08002520 	.word	0x08002520

08000328 <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	6039      	str	r1, [r7, #0]
 8000332:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	2b09      	cmp	r3, #9
 8000338:	d809      	bhi.n	800034e <number_to_string+0x26>
		buf[0] = '0';
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	2230      	movs	r2, #48	; 0x30
 800033e:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	79fa      	ldrb	r2, [r7, #7]
 8000346:	3230      	adds	r2, #48	; 0x30
 8000348:	b2d2      	uxtb	r2, r2
 800034a:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 800034c:	e01f      	b.n	800038e <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	2b09      	cmp	r3, #9
 8000352:	d91c      	bls.n	800038e <number_to_string+0x66>
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	2b62      	cmp	r3, #98	; 0x62
 8000358:	d819      	bhi.n	800038e <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	4a0f      	ldr	r2, [pc, #60]	; (800039c <number_to_string+0x74>)
 800035e:	fba2 2303 	umull	r2, r3, r2, r3
 8000362:	08db      	lsrs	r3, r3, #3
 8000364:	b2db      	uxtb	r3, r3
 8000366:	3330      	adds	r3, #48	; 0x30
 8000368:	b2da      	uxtb	r2, r3
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 800036e:	79fa      	ldrb	r2, [r7, #7]
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <number_to_string+0x74>)
 8000372:	fba3 1302 	umull	r1, r3, r3, r2
 8000376:	08d9      	lsrs	r1, r3, #3
 8000378:	460b      	mov	r3, r1
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	440b      	add	r3, r1
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	b2da      	uxtb	r2, r3
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	3230      	adds	r2, #48	; 0x30
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	701a      	strb	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	cccccccd 	.word	0xcccccccd

080003a0 <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <time_to_string+0x48>)
 80003aa:	223a      	movs	r2, #58	; 0x3a
 80003ac:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <time_to_string+0x48>)
 80003b0:	223a      	movs	r2, #58	; 0x3a
 80003b2:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	789b      	ldrb	r3, [r3, #2]
 80003b8:	490b      	ldr	r1, [pc, #44]	; (80003e8 <time_to_string+0x48>)
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ffb4 	bl	8000328 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	785b      	ldrb	r3, [r3, #1]
 80003c4:	4909      	ldr	r1, [pc, #36]	; (80003ec <time_to_string+0x4c>)
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ffae 	bl	8000328 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4907      	ldr	r1, [pc, #28]	; (80003f0 <time_to_string+0x50>)
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ffa8 	bl	8000328 <number_to_string>

	buf[8] = '\0';
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <time_to_string+0x48>)
 80003da:	2200      	movs	r2, #0
 80003dc:	721a      	strb	r2, [r3, #8]

	return buf;
 80003de:	4b02      	ldr	r3, [pc, #8]	; (80003e8 <time_to_string+0x48>)

}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2000008c 	.word	0x2000008c
 80003ec:	2000008f 	.word	0x2000008f
 80003f0:	20000092 	.word	0x20000092

080003f4 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <date_to_string+0x48>)
 80003fe:	222f      	movs	r2, #47	; 0x2f
 8000400:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <date_to_string+0x48>)
 8000404:	222f      	movs	r2, #47	; 0x2f
 8000406:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	490b      	ldr	r1, [pc, #44]	; (800043c <date_to_string+0x48>)
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff8a 	bl	8000328 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	785b      	ldrb	r3, [r3, #1]
 8000418:	4909      	ldr	r1, [pc, #36]	; (8000440 <date_to_string+0x4c>)
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff84 	bl	8000328 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	789b      	ldrb	r3, [r3, #2]
 8000424:	4907      	ldr	r1, [pc, #28]	; (8000444 <date_to_string+0x50>)
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ff7e 	bl	8000328 <number_to_string>

	buf[8]= '\0';
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <date_to_string+0x48>)
 800042e:	2200      	movs	r2, #0
 8000430:	721a      	strb	r2, [r3, #8]

	return buf;
 8000432:	4b02      	ldr	r3, [pc, #8]	; (800043c <date_to_string+0x48>)

}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000098 	.word	0x20000098
 8000440:	2000009b 	.word	0x2000009b
 8000444:	2000009e 	.word	0x2000009e

08000448 <main>:
{
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
}

int main(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0

	RTC_time_t current_time;
	RTC_date_t current_date;

#ifndef PRINT_LCD
	printf("RTC test\n");
 800044e:	4830      	ldr	r0, [pc, #192]	; (8000510 <main+0xc8>)
 8000450:	f001 f9ce 	bl	80017f0 <puts>

	lcd_display_clear();
	lcd_display_return_home();
#endif

	if(ds1307_init()){
 8000454:	f000 f982 	bl	800075c <ds1307_init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d003      	beq.n	8000466 <main+0x1e>
		printf("RTC init has failed\n");
 800045e:	482d      	ldr	r0, [pc, #180]	; (8000514 <main+0xcc>)
 8000460:	f001 f9c6 	bl	80017f0 <puts>
		while(1);
 8000464:	e7fe      	b.n	8000464 <main+0x1c>
	}

	init_systick_timer(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff ff0a 	bl	8000280 <init_systick_timer>

	current_date.day = FRIDAY;
 800046c:	2306      	movs	r3, #6
 800046e:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000470:	230f      	movs	r3, #15
 8000472:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8000474:	2301      	movs	r3, #1
 8000476:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 8000478:	2315      	movs	r3, #21
 800047a:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 11;
 800047c:	230b      	movs	r3, #11
 800047e:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000480:	233b      	movs	r3, #59	; 0x3b
 8000482:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8000484:	231e      	movs	r3, #30
 8000486:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000488:	2301      	movs	r3, #1
 800048a:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f9cb 	bl	800082a <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f97d 	bl	8000798 <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f9f1 	bl	800088a <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fa36 	bl	800091c <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 80004b0:	7afb      	ldrb	r3, [r7, #11]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d012      	beq.n	80004dc <main+0x94>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <main+0x78>
 80004bc:	4b16      	ldr	r3, [pc, #88]	; (8000518 <main+0xd0>)
 80004be:	e000      	b.n	80004c2 <main+0x7a>
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <main+0xd4>)
 80004c2:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 80004c4:	f107 0308 	add.w	r3, r7, #8
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff69 	bl	80003a0 <time_to_string>
 80004ce:	4603      	mov	r3, r0
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4812      	ldr	r0, [pc, #72]	; (8000520 <main+0xd8>)
 80004d6:	f001 f925 	bl	8001724 <iprintf>
 80004da:	e009      	b.n	80004f0 <main+0xa8>
		lcd_print_string(time_to_string(&current_time));
		lcd_print_string(am_pm);
#endif
	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ff5d 	bl	80003a0 <time_to_string>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4619      	mov	r1, r3
 80004ea:	480e      	ldr	r0, [pc, #56]	; (8000524 <main+0xdc>)
 80004ec:	f001 f91a 	bl	8001724 <iprintf>
		lcd_print_string(time_to_string(&current_time));
#endif
	}

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff7e 	bl	80003f4 <date_to_string>
 80004f8:	4604      	mov	r4, r0
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fef5 	bl	80002ec <get_day_of_week>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	4621      	mov	r1, r4
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <main+0xe0>)
 800050a:	f001 f90b 	bl	8001724 <iprintf>
	lcd_set_cursor(2, 1);
	lcd_print_string(date_to_string(&current_date));
#endif


	while(1);
 800050e:	e7fe      	b.n	800050e <main+0xc6>
 8000510:	0800253c 	.word	0x0800253c
 8000514:	08002548 	.word	0x08002548
 8000518:	0800255c 	.word	0x0800255c
 800051c:	08002560 	.word	0x08002560
 8000520:	08002564 	.word	0x08002564
 8000524:	0800257c 	.word	0x0800257c
 8000528:	08002590 	.word	0x08002590

0800052c <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a7 	bl	800088a <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 800053c:	7afb      	ldrb	r3, [r7, #11]
 800053e:	2b02      	cmp	r3, #2
 8000540:	d012      	beq.n	8000568 <SysTick_Handler+0x3c>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SysTick_Handler+0x20>
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <SysTick_Handler+0x80>)
 800054a:	e000      	b.n	800054e <SysTick_Handler+0x22>
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <SysTick_Handler+0x84>)
 800054e:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff23 	bl	80003a0 <time_to_string>
 800055a:	4603      	mov	r3, r0
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	4619      	mov	r1, r3
 8000560:	4814      	ldr	r0, [pc, #80]	; (80005b4 <SysTick_Handler+0x88>)
 8000562:	f001 f8df 	bl	8001724 <iprintf>
 8000566:	e009      	b.n	800057c <SysTick_Handler+0x50>
		lcd_print_string(am_pm);
#endif

	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff17 	bl	80003a0 <time_to_string>
 8000572:	4603      	mov	r3, r0
 8000574:	4619      	mov	r1, r3
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <SysTick_Handler+0x8c>)
 8000578:	f001 f8d4 	bl	8001724 <iprintf>
		lcd_set_cursor(1, 1);
		lcd_print_string(time_to_string(&current_time));
#endif
	}

	ds1307_get_current_date(&current_date);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f9cc 	bl	800091c <ds1307_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ff34 	bl	80003f4 <date_to_string>
 800058c:	4604      	mov	r4, r0
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff feab 	bl	80002ec <get_day_of_week>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	4621      	mov	r1, r4
 800059c:	4807      	ldr	r0, [pc, #28]	; (80005bc <SysTick_Handler+0x90>)
 800059e:	f001 f8c1 	bl	8001724 <iprintf>
	lcd_print_string(get_day_of_week(current_date.day));
	lcd_print_char('>');
#endif


}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd90      	pop	{r4, r7, pc}
 80005aa:	bf00      	nop
 80005ac:	0800255c 	.word	0x0800255c
 80005b0:	08002560 	.word	0x08002560
 80005b4:	08002564 	.word	0x08002564
 80005b8:	0800257c 	.word	0x0800257c
 80005bc:	08002590 	.word	0x08002590

080005c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	e00a      	b.n	80005e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005d2:	f3af 8000 	nop.w
 80005d6:	4601      	mov	r1, r0
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	60ba      	str	r2, [r7, #8]
 80005de:	b2ca      	uxtb	r2, r1
 80005e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf0      	blt.n	80005d2 <_read+0x12>
  }

  return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e009      	b.n	8000620 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	60ba      	str	r2, [r7, #8]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	dbf1      	blt.n	800060c <_write+0x12>
  }
  return len;
 8000628:	687b      	ldr	r3, [r7, #4]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_close>:

int _close(int file)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800065a:	605a      	str	r2, [r3, #4]
  return 0;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <_isatty>:

int _isatty(int file)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000672:	2301      	movs	r3, #1
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <_sbrk+0x5c>)
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <_sbrk+0x60>)
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <_sbrk+0x64>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <_sbrk+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d207      	bcs.n	80006dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006cc:	f001 f9be 	bl	8001a4c <__errno>
 80006d0:	4603      	mov	r3, r0
 80006d2:	220c      	movs	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	e009      	b.n	80006f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <_sbrk+0x64>)
 80006ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20018000 	.word	0x20018000
 80006fc:	00000400 	.word	0x00000400
 8000700:	200000a4 	.word	0x200000a4
 8000704:	20000220 	.word	0x20000220

08000708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800070a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800070c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <LoopForever+0x6>)
  ldr r1, =_edata
 8000712:	490d      	ldr	r1, [pc, #52]	; (8000748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <LoopForever+0xe>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000728:	4c0a      	ldr	r4, [pc, #40]	; (8000754 <LoopForever+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000736:	f001 f98f 	bl	8001a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073a:	f7ff fe85 	bl	8000448 <main>

0800073e <LoopForever>:

LoopForever:
  b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   r0, =_estack
 8000740:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800074c:	080025e4 	.word	0x080025e4
  ldr r2, =_sbss
 8000750:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000754:	2000021c 	.word	0x2000021c

08000758 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC_IRQHandler>
	...

0800075c <ds1307_init>:
I2C_Handle_t g_ds1307I2cHandle;

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t ds1307_init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

	//1. init the i2c pins
	ds1307_i2c_pin_config();
 8000762:	f000 f90f 	bl	8000984 <ds1307_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 8000766:	f000 f949 	bl	80009fc <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800076a:	2101      	movs	r1, #1
 800076c:	4809      	ldr	r0, [pc, #36]	; (8000794 <ds1307_init+0x38>)
 800076e:	f000 fc8a 	bl	8001086 <I2C_PeripheralControl>

	//4. Make clock halt = 0;
	ds1307_write(0x00,DS1307_ADDR_SEC);
 8000772:	2100      	movs	r1, #0
 8000774:	2000      	movs	r0, #0
 8000776:	f000 f957 	bl	8000a28 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800077a:	2000      	movs	r0, #0
 800077c:	f000 f970 	bl	8000a60 <ds1307_read>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7 ) & 0x1);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	09db      	lsrs	r3, r3, #7
 8000788:	b2db      	uxtb	r3, r3

}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40005400 	.word	0x40005400

08000798 <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f979 	bl	8000a9c <binary_to_bcd>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007b4:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f934 	bl	8000a28 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f969 	bl	8000a9c <binary_to_bcd>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2101      	movs	r1, #1
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f92a 	bl	8000a28 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	789b      	ldrb	r3, [r3, #2]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f95f 	bl	8000a9c <binary_to_bcd>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	78db      	ldrb	r3, [r3, #3]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d104      	bne.n	80007f4 <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	e011      	b.n	8000818 <ds1307_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fa:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d104      	bne.n	800080e <ds1307_set_current_time+0x76>
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	f043 0320 	orr.w	r3, r3, #32
 800080a:	b2db      	uxtb	r3, r3
 800080c:	e003      	b.n	8000816 <ds1307_set_current_time+0x7e>
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	f023 0320 	bic.w	r3, r3, #32
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs,DS1307_ADDR_HRS);
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	2102      	movs	r1, #2
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f903 	bl	8000a28 <ds1307_write>

}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f930 	bl	8000a9c <binary_to_bcd>
 800083c:	4603      	mov	r3, r0
 800083e:	2104      	movs	r1, #4
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f8f1 	bl	8000a28 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	785b      	ldrb	r3, [r3, #1]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f926 	bl	8000a9c <binary_to_bcd>
 8000850:	4603      	mov	r3, r0
 8000852:	2105      	movs	r1, #5
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f8e7 	bl	8000a28 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	789b      	ldrb	r3, [r3, #2]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f91c 	bl	8000a9c <binary_to_bcd>
 8000864:	4603      	mov	r3, r0
 8000866:	2106      	movs	r1, #6
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f8dd 	bl	8000a28 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	78db      	ldrb	r3, [r3, #3]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f912 	bl	8000a9c <binary_to_bcd>
 8000878:	4603      	mov	r3, r0
 800087a:	2103      	movs	r1, #3
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f8d3 	bl	8000a28 <ds1307_write>

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b084      	sub	sp, #16
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f8e4 	bl	8000a60 <ds1307_read>
 8000898:	4603      	mov	r3, r0
 800089a:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 800089c:	7bbb      	ldrb	r3, [r7, #14]
 800089e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008a2:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f924 	bl	8000af4 <bcd_to_binary>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 f8d3 	bl	8000a60 <ds1307_read>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f919 	bl	8000af4 <bcd_to_binary>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f000 f8c8 	bl	8000a60 <ds1307_read>
 80008d0:	4603      	mov	r3, r0
 80008d2:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00f      	beq.n	80008fe <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	f003 0320 	and.w	r3, r3, #32
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	bf14      	ite	ne
 80008e8:	2301      	movne	r3, #1
 80008ea:	2300      	moveq	r3, #0
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	e002      	b.n	8000904 <ds1307_get_current_time+0x7a>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2202      	movs	r2, #2
 8000902:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f8f4 	bl	8000af4 <bcd_to_binary>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	709a      	strb	r2, [r3, #2]
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f89b 	bl	8000a60 <ds1307_read>
 800092a:	4603      	mov	r3, r0
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f8e1 	bl	8000af4 <bcd_to_binary>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 800093a:	2004      	movs	r0, #4
 800093c:	f000 f890 	bl	8000a60 <ds1307_read>
 8000940:	4603      	mov	r3, r0
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f8d6 	bl	8000af4 <bcd_to_binary>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000950:	2005      	movs	r0, #5
 8000952:	f000 f885 	bl	8000a60 <ds1307_read>
 8000956:	4603      	mov	r3, r0
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f8cb 	bl	8000af4 <bcd_to_binary>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000966:	2006      	movs	r0, #6
 8000968:	f000 f87a 	bl	8000a60 <ds1307_read>
 800096c:	4603      	mov	r3, r0
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f8c0 	bl	8000af4 <bcd_to_binary>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	709a      	strb	r2, [r3, #2]

}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	220c      	movs	r2, #12
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f80c 	bl	80019b0 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000998:	463b      	mov	r3, r7
 800099a:	220c      	movs	r2, #12
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 f806 	bl	80019b0 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <ds1307_i2c_pin_config+0x74>)
 80009a6:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009ac:	2302      	movs	r3, #2
 80009ae:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80009b0:	2307      	movs	r3, #7
 80009b2:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009b4:	2301      	movs	r3, #1
 80009b6:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80009b8:	2301      	movs	r3, #1
 80009ba:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009bc:	2302      	movs	r3, #2
 80009be:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f95d 	bl	8000c84 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <ds1307_i2c_pin_config+0x74>)
 80009cc:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009d2:	2302      	movs	r3, #2
 80009d4:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 80009d6:	2306      	movs	r3, #6
 80009d8:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009da:	2301      	movs	r3, #1
 80009dc:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80009de:	2301      	movs	r3, #1
 80009e0:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009e2:	2302      	movs	r3, #2
 80009e4:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 80009e6:	463b      	mov	r3, r7
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f94b 	bl	8000c84 <GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40020400 	.word	0x40020400

080009fc <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <ds1307_i2c_config+0x20>)
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <ds1307_i2c_config+0x24>)
 8000a04:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <ds1307_i2c_config+0x20>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <ds1307_i2c_config+0x20>)
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <ds1307_i2c_config+0x28>)
 8000a10:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 8000a12:	4802      	ldr	r0, [pc, #8]	; (8000a1c <ds1307_i2c_config+0x20>)
 8000a14:	f000 fb8c 	bl	8001130 <I2C_Init>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000a8 	.word	0x200000a8
 8000a20:	40005400 	.word	0x40005400
 8000a24:	000186a0 	.word	0x000186a0

08000a28 <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000a40:	f107 010c 	add.w	r1, r7, #12
 8000a44:	2300      	movs	r3, #0
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2368      	movs	r3, #104	; 0x68
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <ds1307_write+0x34>)
 8000a4e:	f000 fc35 	bl	80012bc <I2C_MasterSendData>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000a8 	.word	0x200000a8

08000a60 <ds1307_read>:



static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000a6a:	1df9      	adds	r1, r7, #7
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2368      	movs	r3, #104	; 0x68
 8000a72:	2201      	movs	r2, #1
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <ds1307_read+0x38>)
 8000a76:	f000 fc21 	bl	80012bc <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000a7a:	f107 010f 	add.w	r1, r7, #15
 8000a7e:	2300      	movs	r3, #0
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2368      	movs	r3, #104	; 0x68
 8000a84:	2201      	movs	r2, #1
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <ds1307_read+0x38>)
 8000a88:	f000 fc7b 	bl	8001382 <I2C_MasterReceiveData>

    return data;
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000a8 	.word	0x200000a8

08000a9c <binary_to_bcd>:



static uint8_t binary_to_bcd(uint8_t value)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b09      	cmp	r3, #9
 8000aae:	d918      	bls.n	8000ae2 <binary_to_bcd+0x46>
	{
		m = value /10;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <binary_to_bcd+0x54>)
 8000ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab8:	08db      	lsrs	r3, r3, #3
 8000aba:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000abc:	79fa      	ldrb	r2, [r7, #7]
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <binary_to_bcd+0x54>)
 8000ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac4:	08d9      	lsrs	r1, r3, #3
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	440b      	add	r3, r1
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8000ad2:	7bbb      	ldrb	r3, [r7, #14]
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	b25a      	sxtb	r2, r3
 8000ad8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	cccccccd 	.word	0xcccccccd

08000af4 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	091b      	lsrs	r3, r3, #4
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 030f 	and.w	r3, r3, #15
 8000b14:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8000b16:	7bfa      	ldrb	r2, [r7, #15]
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b2db      	uxtb	r3, r3
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <GPIO_PeriClockControl>:
 * @Note                       - None

 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d14c      	bne.n	8000bd8 <GPIO_PeriClockControl+0xac>
	{
		if(pGPIOx == GPIOA)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a49      	ldr	r2, [pc, #292]	; (8000c68 <GPIO_PeriClockControl+0x13c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d106      	bne.n	8000b54 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000b46:	4b49      	ldr	r3, [pc, #292]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a48      	ldr	r2, [pc, #288]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DI();
		}
	}

}
 8000b52:	e082      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOB)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a46      	ldr	r2, [pc, #280]	; (8000c70 <GPIO_PeriClockControl+0x144>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d106      	bne.n	8000b6a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000b5c:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a42      	ldr	r2, [pc, #264]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b68:	e077      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOC)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a41      	ldr	r2, [pc, #260]	; (8000c74 <GPIO_PeriClockControl+0x148>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d106      	bne.n	8000b80 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000b72:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a3d      	ldr	r2, [pc, #244]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b7e:	e06c      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOD)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a3d      	ldr	r2, [pc, #244]	; (8000c78 <GPIO_PeriClockControl+0x14c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d106      	bne.n	8000b96 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000b88:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a37      	ldr	r2, [pc, #220]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b94:	e061      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a38      	ldr	r2, [pc, #224]	; (8000c7c <GPIO_PeriClockControl+0x150>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d106      	bne.n	8000bac <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000b9e:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a32      	ldr	r2, [pc, #200]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000ba4:	f043 0310 	orr.w	r3, r3, #16
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000baa:	e056      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOH)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a34      	ldr	r2, [pc, #208]	; (8000c80 <GPIO_PeriClockControl+0x154>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d106      	bne.n	8000bc2 <GPIO_PeriClockControl+0x96>
			GPIOH_PCLK_EN();
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a2c      	ldr	r2, [pc, #176]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bc0:	e04b      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOB)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a2a      	ldr	r2, [pc, #168]	; (8000c70 <GPIO_PeriClockControl+0x144>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d147      	bne.n	8000c5a <GPIO_PeriClockControl+0x12e>
			GPIOB_PCLK_EN();
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bd6:	e040      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		if(pGPIOx == GPIOA)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a23      	ldr	r2, [pc, #140]	; (8000c68 <GPIO_PeriClockControl+0x13c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d106      	bne.n	8000bee <GPIO_PeriClockControl+0xc2>
			GPIOA_PCLK_DI();
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000be6:	f023 0301 	bic.w	r3, r3, #1
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bec:	e035      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOB)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <GPIO_PeriClockControl+0x144>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d106      	bne.n	8000c04 <GPIO_PeriClockControl+0xd8>
			GPIOB_PCLK_DI();
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000bfc:	f023 0302 	bic.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c02:	e02a      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOC)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <GPIO_PeriClockControl+0x148>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d106      	bne.n	8000c1a <GPIO_PeriClockControl+0xee>
			GPIOC_PCLK_DI();
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000c12:	f023 0304 	bic.w	r3, r3, #4
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c18:	e01f      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOD)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <GPIO_PeriClockControl+0x14c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d106      	bne.n	8000c30 <GPIO_PeriClockControl+0x104>
			GPIOD_PCLK_DI();
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000c28:	f023 0308 	bic.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c2e:	e014      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <GPIO_PeriClockControl+0x150>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d106      	bne.n	8000c46 <GPIO_PeriClockControl+0x11a>
			GPIOE_PCLK_DI();
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000c3e:	f023 0310 	bic.w	r3, r3, #16
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c44:	e009      	b.n	8000c5a <GPIO_PeriClockControl+0x12e>
		else if(pGPIOx == GPIOH)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <GPIO_PeriClockControl+0x154>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d105      	bne.n	8000c5a <GPIO_PeriClockControl+0x12e>
			GPIOH_PCLK_DI();
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <GPIO_PeriClockControl+0x140>)
 8000c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020400 	.word	0x40020400
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020c00 	.word	0x40020c00
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40021c00 	.word	0x40021c00

08000c84 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0; // temp. register
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

    //enable peripheral clock
    GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff48 	bl	8000b2c <GPIO_PeriClockControl>
	//1. CONFIGURE	mode for GPIO pin

    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN )
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	795b      	ldrb	r3, [r3, #5]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d820      	bhi.n	8000ce6 <GPIO_Init+0x62>
    {

		//non interrupt mode

	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	795b      	ldrb	r3, [r3, #5]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	791b      	ldrb	r3, [r3, #4]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	791b      	ldrb	r3, [r3, #4]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4619      	mov	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	400a      	ands	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6819      	ldr	r1, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	e0a1      	b.n	8000e2a <GPIO_Init+0x1a6>
	}
	else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	795b      	ldrb	r3, [r3, #5]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d117      	bne.n	8000d1e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cee:	4b9b      	ldr	r3, [pc, #620]	; (8000f5c <GPIO_Init+0x2d8>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	7912      	ldrb	r2, [r2, #4]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	408a      	lsls	r2, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4a97      	ldr	r2, [pc, #604]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d00:	430b      	orrs	r3, r1
 8000d02:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d04:	4b95      	ldr	r3, [pc, #596]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	7912      	ldrb	r2, [r2, #4]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	2201      	movs	r2, #1
 8000d10:	408a      	lsls	r2, r1
 8000d12:	43d2      	mvns	r2, r2
 8000d14:	4611      	mov	r1, r2
 8000d16:	4a91      	ldr	r2, [pc, #580]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d18:	400b      	ands	r3, r1
 8000d1a:	6093      	str	r3, [r2, #8]
 8000d1c:	e035      	b.n	8000d8a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	795b      	ldrb	r3, [r3, #5]
 8000d22:	2b05      	cmp	r3, #5
 8000d24:	d117      	bne.n	8000d56 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d26:	4b8d      	ldr	r3, [pc, #564]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	7912      	ldrb	r2, [r2, #4]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	2201      	movs	r2, #1
 8000d32:	408a      	lsls	r2, r1
 8000d34:	4611      	mov	r1, r2
 8000d36:	4a89      	ldr	r2, [pc, #548]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d3c:	4b87      	ldr	r3, [pc, #540]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	7912      	ldrb	r2, [r2, #4]
 8000d44:	4611      	mov	r1, r2
 8000d46:	2201      	movs	r2, #1
 8000d48:	408a      	lsls	r2, r1
 8000d4a:	43d2      	mvns	r2, r2
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4a83      	ldr	r2, [pc, #524]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d50:	400b      	ands	r3, r1
 8000d52:	60d3      	str	r3, [r2, #12]
 8000d54:	e019      	b.n	8000d8a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	795b      	ldrb	r3, [r3, #5]
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d115      	bne.n	8000d8a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d5e:	4b7f      	ldr	r3, [pc, #508]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	7912      	ldrb	r2, [r2, #4]
 8000d66:	4611      	mov	r1, r2
 8000d68:	2201      	movs	r2, #1
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4a7b      	ldr	r2, [pc, #492]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d74:	4b79      	ldr	r3, [pc, #484]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	7912      	ldrb	r2, [r2, #4]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	2201      	movs	r2, #1
 8000d80:	408a      	lsls	r2, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	4a75      	ldr	r2, [pc, #468]	; (8000f5c <GPIO_Init+0x2d8>)
 8000d86:	430b      	orrs	r3, r1
 8000d88:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	791b      	ldrb	r3, [r3, #4]
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	791b      	ldrb	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a6f      	ldr	r2, [pc, #444]	; (8000f60 <GPIO_Init+0x2dc>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d024      	beq.n	8000df0 <GPIO_Init+0x16c>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a6e      	ldr	r2, [pc, #440]	; (8000f64 <GPIO_Init+0x2e0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d01d      	beq.n	8000dec <GPIO_Init+0x168>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a6c      	ldr	r2, [pc, #432]	; (8000f68 <GPIO_Init+0x2e4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d016      	beq.n	8000de8 <GPIO_Init+0x164>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a6b      	ldr	r2, [pc, #428]	; (8000f6c <GPIO_Init+0x2e8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d00f      	beq.n	8000de4 <GPIO_Init+0x160>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a69      	ldr	r2, [pc, #420]	; (8000f70 <GPIO_Init+0x2ec>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d008      	beq.n	8000de0 <GPIO_Init+0x15c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a68      	ldr	r2, [pc, #416]	; (8000f74 <GPIO_Init+0x2f0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d101      	bne.n	8000ddc <GPIO_Init+0x158>
 8000dd8:	2307      	movs	r3, #7
 8000dda:	e00a      	b.n	8000df2 <GPIO_Init+0x16e>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e008      	b.n	8000df2 <GPIO_Init+0x16e>
 8000de0:	2304      	movs	r3, #4
 8000de2:	e006      	b.n	8000df2 <GPIO_Init+0x16e>
 8000de4:	2303      	movs	r3, #3
 8000de6:	e004      	b.n	8000df2 <GPIO_Init+0x16e>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e002      	b.n	8000df2 <GPIO_Init+0x16e>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <GPIO_Init+0x16e>
 8000df0:	2300      	movs	r3, #0
 8000df2:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 8000df4:	4b60      	ldr	r3, [pc, #384]	; (8000f78 <GPIO_Init+0x2f4>)
 8000df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df8:	4a5f      	ldr	r2, [pc, #380]	; (8000f78 <GPIO_Init+0x2f4>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfe:	6453      	str	r3, [r2, #68]	; 0x44

		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000e00:	7c7a      	ldrb	r2, [r7, #17]
 8000e02:	7cbb      	ldrb	r3, [r7, #18]
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	fa02 f103 	lsl.w	r1, r2, r3
 8000e0a:	4a5c      	ldr	r2, [pc, #368]	; (8000f7c <GPIO_Init+0x2f8>)
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000e14:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <GPIO_Init+0x2d8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	7912      	ldrb	r2, [r2, #4]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	2201      	movs	r2, #1
 8000e20:	408a      	lsls	r2, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	4a4d      	ldr	r2, [pc, #308]	; (8000f5c <GPIO_Init+0x2d8>)
 8000e26:	430b      	orrs	r3, r1
 8000e28:	6013      	str	r3, [r2, #0]

	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	799b      	ldrb	r3, [r3, #6]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	791b      	ldrb	r3, [r3, #4]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2103      	movs	r1, #3
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	400a      	ands	r2, r1
 8000e58:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6899      	ldr	r1, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	79db      	ldrb	r3, [r3, #7]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	791b      	ldrb	r3, [r3, #4]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	791b      	ldrb	r3, [r3, #4]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2103      	movs	r1, #3
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4619      	mov	r1, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	400a      	ands	r2, r1
 8000e98:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68d9      	ldr	r1, [r3, #12]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7a1b      	ldrb	r3, [r3, #8]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	791b      	ldrb	r3, [r3, #4]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6859      	ldr	r1, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	795b      	ldrb	r3, [r3, #5]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d131      	bne.n	8000f52 <GPIO_Init+0x2ce>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	791b      	ldrb	r3, [r3, #4]
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	743b      	strb	r3, [r7, #16]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	791b      	ldrb	r3, [r3, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	7c3a      	ldrb	r2, [r7, #16]
 8000f06:	3208      	adds	r2, #8
 8000f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	7c3a      	ldrb	r2, [r7, #16]
 8000f20:	4001      	ands	r1, r0
 8000f22:	3208      	adds	r2, #8
 8000f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	7c3a      	ldrb	r2, [r7, #16]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7a5b      	ldrb	r3, [r3, #9]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	7c3a      	ldrb	r2, [r7, #16]
 8000f4a:	4301      	orrs	r1, r0
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}


}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40013c00 	.word	0x40013c00
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40021c00 	.word	0x40021c00
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40013800 	.word	0x40013800

08000f80 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000fba:	78fa      	ldrb	r2, [r7, #3]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	611a      	str	r2, [r3, #16]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000fe6:	78fa      	ldrb	r2, [r7, #3]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	611a      	str	r2, [r3, #16]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d01f      	beq.n	800104e <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7f1b      	ldrb	r3, [r3, #28]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d112      	bne.n	800103c <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d11f      	bne.n	800105e <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fa3e 	bl	80014a6 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 800103a:	e010      	b.n	800105e <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	60fb      	str	r3, [r7, #12]
}
 800104c:	e007      	b.n	800105e <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	60fb      	str	r3, [r7, #12]
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <I2C_PeripheralControl>:
  *
  * @Note              -

  */
 void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
 {
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	460b      	mov	r3, r1
 8001090:	70fb      	strb	r3, [r7, #3]
 	if(EnOrDi == ENABLE)
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d106      	bne.n	80010a6 <I2C_PeripheralControl+0x20>
 	{
 		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f043 0201 	orr.w	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	601a      	str	r2, [r3, #0]
 	}else
 	{
 		pI2Cx->CR1 &= ~(1 << 0);
 	}

 }
 80010a4:	e005      	b.n	80010b2 <I2C_PeripheralControl+0x2c>
 		pI2Cx->CR1 &= ~(1 << 0);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 0201 	bic.w	r2, r3, #1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
 }
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <I2C_PeriClockControl>:
  *
  * @Note              -

  */
 void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
 	if(EnorDi == ENABLE)
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d11f      	bne.n	8001112 <I2C_PeriClockControl+0x52>
 	{
 		if(pI2Cx == I2C1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <I2C_PeriClockControl+0x60>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d106      	bne.n	80010e8 <I2C_PeriClockControl+0x28>
 		{
 			I2C1_PCLK_EN();
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <I2C_PeriClockControl+0x64>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <I2C_PeriClockControl+0x64>)
 80010e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 	else
 	{
 		//TODO
 	}

 }
 80010e6:	e014      	b.n	8001112 <I2C_PeriClockControl+0x52>
 		}else if (pI2Cx == I2C2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <I2C_PeriClockControl+0x68>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d106      	bne.n	80010fe <I2C_PeriClockControl+0x3e>
 			I2C2_PCLK_EN();
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <I2C_PeriClockControl+0x64>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <I2C_PeriClockControl+0x64>)
 80010f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 }
 80010fc:	e009      	b.n	8001112 <I2C_PeriClockControl+0x52>
 		}else if (pI2Cx == I2C3)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <I2C_PeriClockControl+0x6c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d105      	bne.n	8001112 <I2C_PeriClockControl+0x52>
 			I2C3_PCLK_EN();
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <I2C_PeriClockControl+0x64>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a06      	ldr	r2, [pc, #24]	; (8001124 <I2C_PeriClockControl+0x64>)
 800110c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 }
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40005400 	.word	0x40005400
 8001124:	40023800 	.word	0x40023800
 8001128:	40005800 	.word	0x40005800
 800112c:	40005c00 	.word	0x40005c00

08001130 <I2C_Init>:
  *
  * @Note              -

  */
 void I2C_Init(I2C_Handle_t *pI2CHandle)
 {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 	uint32_t tempreg = 0 ;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]

 	//enable the clock for the i2cx peripheral
 	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffbc 	bl	80010c0 <I2C_PeriClockControl>

 	//ack control bit
 	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7a5b      	ldrb	r3, [r3, #9]
 800114c:	029b      	lsls	r3, r3, #10
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
 	pI2CHandle->pI2Cx->CR1 = tempreg;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	601a      	str	r2, [r3, #0]

 	//configure the FREQ field of CR2
 	tempreg = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8001162:	f000 f9bd 	bl	80014e0 <RCC_GetPCLK1Value>
 8001166:	4603      	mov	r3, r0
 8001168:	4a47      	ldr	r2, [pc, #284]	; (8001288 <I2C_Init+0x158>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	0c9b      	lsrs	r3, r3, #18
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
 	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001180:	605a      	str	r2, [r3, #4]

    //program the device own address
 	tempreg = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a1b      	ldrb	r3, [r3, #8]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	461a      	mov	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
 	tempreg |= ( 1 << 14);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 	pI2CHandle->pI2Cx->OAR1 = tempreg;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	609a      	str	r2, [r3, #8]

 	//CCR calculations
 	uint16_t ccr_value = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	817b      	strh	r3, [r7, #10]
 	tempreg = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a36      	ldr	r2, [pc, #216]	; (800128c <I2C_Init+0x15c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d80f      	bhi.n	80011d6 <I2C_Init+0xa6>
 	{
 		//mode is standard mode
 		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80011b6:	f000 f993 	bl	80014e0 <RCC_GetPCLK1Value>
 80011ba:	4602      	mov	r2, r0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	817b      	strh	r3, [r7, #10]
 		tempreg |= (ccr_value & 0xFFF);
 80011c8:	897b      	ldrh	r3, [r7, #10]
 80011ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e02d      	b.n	8001232 <I2C_Init+0x102>
 	}else
 	{
 		//mode is fast mode
 		tempreg |= ( 1 << 15);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011dc:	60fb      	str	r3, [r7, #12]
 		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7a9b      	ldrb	r3, [r3, #10]
 80011e2:	039b      	lsls	r3, r3, #14
 80011e4:	461a      	mov	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
 		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7a9b      	ldrb	r3, [r3, #10]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10b      	bne.n	800120c <I2C_Init+0xdc>
 		{
 			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80011f4:	f000 f974 	bl	80014e0 <RCC_GetPCLK1Value>
 80011f8:	4601      	mov	r1, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	fbb1 f3f3 	udiv	r3, r1, r3
 8001208:	817b      	strh	r3, [r7, #10]
 800120a:	e00c      	b.n	8001226 <I2C_Init+0xf6>
 		}else
 		{
 			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800120c:	f000 f968 	bl	80014e0 <RCC_GetPCLK1Value>
 8001210:	4601      	mov	r1, r0
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009a      	lsls	r2, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	fbb1 f3f3 	udiv	r3, r1, r3
 8001224:	817b      	strh	r3, [r7, #10]
 		}
 		tempreg |= (ccr_value & 0xFFF);
 8001226:	897b      	ldrh	r3, [r7, #10]
 8001228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
 	}
 	pI2CHandle->pI2Cx->CCR = tempreg;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	61da      	str	r2, [r3, #28]

 	//TRISE Configuration
 	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4a13      	ldr	r2, [pc, #76]	; (800128c <I2C_Init+0x15c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d809      	bhi.n	8001258 <I2C_Init+0x128>
 	{
 		//mode is standard mode

 		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8001244:	f000 f94c 	bl	80014e0 <RCC_GetPCLK1Value>
 8001248:	4603      	mov	r3, r0
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <I2C_Init+0x158>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	0c9b      	lsrs	r3, r3, #18
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e00d      	b.n	8001274 <I2C_Init+0x144>

 	}else
 	{
 		//mode is fast mode
 		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8001258:	f000 f942 	bl	80014e0 <RCC_GetPCLK1Value>
 800125c:	4603      	mov	r3, r0
 800125e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001262:	fb02 f303 	mul.w	r3, r2, r3
 8001266:	0a5b      	lsrs	r3, r3, #9
 8001268:	4a09      	ldr	r2, [pc, #36]	; (8001290 <I2C_Init+0x160>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	09db      	lsrs	r3, r3, #7
 8001270:	3301      	adds	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]

 	}

 	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800127e:	621a      	str	r2, [r3, #32]

 }
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	431bde83 	.word	0x431bde83
 800128c:	000186a0 	.word	0x000186a0
 8001290:	00044b83 	.word	0x00044b83

08001294 <I2C_GetFlagStatus>:

 }


 uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
 {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
 	if(pI2Cx->SR1 & FlagName)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <I2C_GetFlagStatus+0x1a>
 	{
 		return FLAG_SET;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <I2C_GetFlagStatus+0x1c>
 	}
 	return FLAG_RESET;
 80012ae:	2300      	movs	r3, #0
 }
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <I2C_MasterSendData>:



 void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
 {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	70fb      	strb	r3, [r7, #3]
 	// 1. Generate the START condition
 	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe56 	bl	8000f80 <I2C_GenerateStartCondition>

 	//2. confirm that start generation is completed by checking the SB flag in the SR1
 	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
 	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 80012d4:	bf00      	nop
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ffd9 	bl	8001294 <I2C_GetFlagStatus>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f6      	beq.n	80012d6 <I2C_MasterSendData+0x1a>

 	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
 	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	78fa      	ldrb	r2, [r7, #3]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe55 	bl	8000fa0 <I2C_ExecuteAddressPhaseWrite>

 	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
 	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80012f6:	bf00      	nop
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2102      	movs	r1, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffc8 	bl	8001294 <I2C_GetFlagStatus>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f6      	beq.n	80012f8 <I2C_MasterSendData+0x3c>

 	//5. clear the ADDR flag according to its software sequence
 	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
 	I2C_ClearADDRFlag(pI2CHandle);
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff fe74 	bl	8000ff8 <I2C_ClearADDRFlag>

 	//6. send the data until len becomes 0

 	while(Len > 0)
 8001310:	e014      	b.n	800133c <I2C_MasterSendData+0x80>
 	{
 		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8001312:	bf00      	nop
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffba 	bl	8001294 <I2C_GetFlagStatus>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f6      	beq.n	8001314 <I2C_MasterSendData+0x58>
 		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	781a      	ldrb	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	611a      	str	r2, [r3, #16]
 		pTxbuffer++;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	3301      	adds	r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
 		Len--;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3b01      	subs	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 	while(Len > 0)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1e7      	bne.n	8001312 <I2C_MasterSendData+0x56>

 	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
 	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
 	//   when BTF=1 SCL will be stretched (pulled to LOW)

 	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8001342:	bf00      	nop
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffa2 	bl	8001294 <I2C_GetFlagStatus>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f6      	beq.n	8001344 <I2C_MasterSendData+0x88>

 	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8001356:	bf00      	nop
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2104      	movs	r1, #4
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff98 	bl	8001294 <I2C_GetFlagStatus>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f6      	beq.n	8001358 <I2C_MasterSendData+0x9c>


 	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
 	//   Note: generating STOP, automatically clears the BTF
 	if(Sr == I2C_DISABLE_SR )
 800136a:	7e3b      	ldrb	r3, [r7, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <I2C_MasterSendData+0xbe>
 		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe76 	bl	8001066 <I2C_GenerateStopCondition>

 }
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <I2C_MasterReceiveData>:


 void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
 {
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	4611      	mov	r1, r2
 800138e:	461a      	mov	r2, r3
 8001390:	460b      	mov	r3, r1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	4613      	mov	r3, r2
 8001396:	71bb      	strb	r3, [r7, #6]

 	//1. Generate the START condition
 	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fdef 	bl	8000f80 <I2C_GenerateStartCondition>

 	//2. confirm that start generation is completed by checking the SB flag in the SR1
 	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
 	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 80013a2:	bf00      	nop
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff72 	bl	8001294 <I2C_GetFlagStatus>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f6      	beq.n	80013a4 <I2C_MasterReceiveData+0x22>

 	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
 	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	79ba      	ldrb	r2, [r7, #6]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fe04 	bl	8000fcc <I2C_ExecuteAddressPhaseRead>

 	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
 	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 80013c4:	bf00      	nop
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2102      	movs	r1, #2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff61 	bl	8001294 <I2C_GetFlagStatus>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f6      	beq.n	80013c6 <I2C_MasterReceiveData+0x44>


 	//procedure to read only 1 byte from slave
 	if(Len == 1)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d121      	bne.n	8001422 <I2C_MasterReceiveData+0xa0>
 	{
 		//Disable Acking
 		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f85e 	bl	80014a6 <I2C_ManageAcking>


 		//clear the ADDR flag
 		I2C_ClearADDRFlag(pI2CHandle);
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff fe04 	bl	8000ff8 <I2C_ClearADDRFlag>

 		//wait until  RXNE becomes 1
 		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80013f0:	bf00      	nop
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff4b 	bl	8001294 <I2C_GetFlagStatus>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f6      	beq.n	80013f2 <I2C_MasterReceiveData+0x70>

 		//generate STOP condition
 		if(Sr == I2C_DISABLE_SR )
 8001404:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d104      	bne.n	8001416 <I2C_MasterReceiveData+0x94>
 			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe28 	bl	8001066 <I2C_GenerateStopCondition>

 		//read data in to buffer
 		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	701a      	strb	r2, [r3, #0]

 	}


     //procedure to read data from slave when Len > 1
 	if(Len > 1)
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d930      	bls.n	800148a <I2C_MasterReceiveData+0x108>
 	{
 		//clear the ADDR flag
 		I2C_ClearADDRFlag(pI2CHandle);
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f7ff fde5 	bl	8000ff8 <I2C_ClearADDRFlag>

 		//read the data until Len becomes zero
 		for ( uint32_t i = Len ; i > 0 ; i--)
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e027      	b.n	8001484 <I2C_MasterReceiveData+0x102>
 		{
 			//wait until RXNE becomes 1
 			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8001434:	bf00      	nop
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff29 	bl	8001294 <I2C_GetFlagStatus>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f6      	beq.n	8001436 <I2C_MasterReceiveData+0xb4>

 			if(i == 2) //if last 2 bytes are remaining
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d10e      	bne.n	800146c <I2C_MasterReceiveData+0xea>
 			{
 				//Disable Acking
 				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f826 	bl	80014a6 <I2C_ManageAcking>

 				//generate STOP condition
 				if(Sr == I2C_DISABLE_SR )
 800145a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d104      	bne.n	800146c <I2C_MasterReceiveData+0xea>
 					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fdfd 	bl	8001066 <I2C_GenerateStopCondition>

 			}

 			//read the data from data register in to buffer
 			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	701a      	strb	r2, [r3, #0]

 			//increment the buffer address
 			pRxBuffer++;
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	3301      	adds	r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
 		for ( uint32_t i = Len ; i > 0 ; i--)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3b01      	subs	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1d4      	bne.n	8001434 <I2C_MasterReceiveData+0xb2>
 		}

 	}

 	//re-enable ACKing
 	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	7a5b      	ldrb	r3, [r3, #9]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d105      	bne.n	800149e <I2C_MasterReceiveData+0x11c>
 	{
 		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2101      	movs	r1, #1
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f804 	bl	80014a6 <I2C_ManageAcking>
 	}

 }
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <I2C_ManageAcking>:


 void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	70fb      	strb	r3, [r7, #3]
 	if(EnorDi == I2C_ACK_ENABLE)
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <I2C_ManageAcking+0x20>
 	{
 		//enable the ack
 		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	601a      	str	r2, [r3, #0]
 	}else
 	{
 		//disable the ack
 		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 	}
 }
 80014c4:	e005      	b.n	80014d2 <I2C_ManageAcking+0x2c>
 		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
 }
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <RCC_GetPCLK1Value+0x9c>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 80014f4:	7a7b      	ldrb	r3, [r7, #9]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <RCC_GetPCLK1Value+0xa0>)
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e00b      	b.n	8001518 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8001500:	7a7b      	ldrb	r3, [r7, #9]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d102      	bne.n	800150c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <RCC_GetPCLK1Value+0xa4>)
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e005      	b.n	8001518 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 800150c:	7a7b      	ldrb	r3, [r7, #9]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d102      	bne.n	8001518 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8001512:	f000 f83d 	bl	8001590 <RCC_GetPLLOutputClock>
 8001516:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <RCC_GetPCLK1Value+0x9c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8001526:	7a3b      	ldrb	r3, [r7, #8]
 8001528:	2b07      	cmp	r3, #7
 800152a:	d802      	bhi.n	8001532 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	72fb      	strb	r3, [r7, #11]
 8001530:	e005      	b.n	800153e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8001532:	7a3b      	ldrb	r3, [r7, #8]
 8001534:	3b08      	subs	r3, #8
 8001536:	4a14      	ldr	r2, [pc, #80]	; (8001588 <RCC_GetPCLK1Value+0xa8>)
 8001538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153c:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <RCC_GetPCLK1Value+0x9c>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	0a9b      	lsrs	r3, r3, #10
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 800154c:	7a3b      	ldrb	r3, [r7, #8]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d802      	bhi.n	8001558 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8001552:	2301      	movs	r3, #1
 8001554:	72bb      	strb	r3, [r7, #10]
 8001556:	e004      	b.n	8001562 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8001558:	7a3b      	ldrb	r3, [r7, #8]
 800155a:	3b04      	subs	r3, #4
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <RCC_GetPCLK1Value+0xac>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	fbb2 f2f3 	udiv	r2, r2, r3
 800156a:	7abb      	ldrb	r3, [r7, #10]
 800156c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001570:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001572:	687b      	ldr	r3, [r7, #4]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	00f42400 	.word	0x00f42400
 8001584:	007a1200 	.word	0x007a1200
 8001588:	20000000 	.word	0x20000000
 800158c:	20000010 	.word	0x20000010

08001590 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

	return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <std>:
 80015a0:	2300      	movs	r3, #0
 80015a2:	b510      	push	{r4, lr}
 80015a4:	4604      	mov	r4, r0
 80015a6:	e9c0 3300 	strd	r3, r3, [r0]
 80015aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015ae:	6083      	str	r3, [r0, #8]
 80015b0:	8181      	strh	r1, [r0, #12]
 80015b2:	6643      	str	r3, [r0, #100]	; 0x64
 80015b4:	81c2      	strh	r2, [r0, #14]
 80015b6:	6183      	str	r3, [r0, #24]
 80015b8:	4619      	mov	r1, r3
 80015ba:	2208      	movs	r2, #8
 80015bc:	305c      	adds	r0, #92	; 0x5c
 80015be:	f000 f9f7 	bl	80019b0 <memset>
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <std+0x58>)
 80015c4:	6263      	str	r3, [r4, #36]	; 0x24
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <std+0x5c>)
 80015c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <std+0x60>)
 80015cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <std+0x64>)
 80015d0:	6323      	str	r3, [r4, #48]	; 0x30
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <std+0x68>)
 80015d4:	6224      	str	r4, [r4, #32]
 80015d6:	429c      	cmp	r4, r3
 80015d8:	d006      	beq.n	80015e8 <std+0x48>
 80015da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80015de:	4294      	cmp	r4, r2
 80015e0:	d002      	beq.n	80015e8 <std+0x48>
 80015e2:	33d0      	adds	r3, #208	; 0xd0
 80015e4:	429c      	cmp	r4, r3
 80015e6:	d105      	bne.n	80015f4 <std+0x54>
 80015e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015f0:	f000 ba56 	b.w	8001aa0 <__retarget_lock_init_recursive>
 80015f4:	bd10      	pop	{r4, pc}
 80015f6:	bf00      	nop
 80015f8:	08001801 	.word	0x08001801
 80015fc:	08001823 	.word	0x08001823
 8001600:	0800185b 	.word	0x0800185b
 8001604:	0800187f 	.word	0x0800187f
 8001608:	200000d0 	.word	0x200000d0

0800160c <stdio_exit_handler>:
 800160c:	4a02      	ldr	r2, [pc, #8]	; (8001618 <stdio_exit_handler+0xc>)
 800160e:	4903      	ldr	r1, [pc, #12]	; (800161c <stdio_exit_handler+0x10>)
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <stdio_exit_handler+0x14>)
 8001612:	f000 b869 	b.w	80016e8 <_fwalk_sglue>
 8001616:	bf00      	nop
 8001618:	20000014 	.word	0x20000014
 800161c:	0800234d 	.word	0x0800234d
 8001620:	20000020 	.word	0x20000020

08001624 <cleanup_stdio>:
 8001624:	6841      	ldr	r1, [r0, #4]
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <cleanup_stdio+0x34>)
 8001628:	4299      	cmp	r1, r3
 800162a:	b510      	push	{r4, lr}
 800162c:	4604      	mov	r4, r0
 800162e:	d001      	beq.n	8001634 <cleanup_stdio+0x10>
 8001630:	f000 fe8c 	bl	800234c <_fflush_r>
 8001634:	68a1      	ldr	r1, [r4, #8]
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <cleanup_stdio+0x38>)
 8001638:	4299      	cmp	r1, r3
 800163a:	d002      	beq.n	8001642 <cleanup_stdio+0x1e>
 800163c:	4620      	mov	r0, r4
 800163e:	f000 fe85 	bl	800234c <_fflush_r>
 8001642:	68e1      	ldr	r1, [r4, #12]
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <cleanup_stdio+0x3c>)
 8001646:	4299      	cmp	r1, r3
 8001648:	d004      	beq.n	8001654 <cleanup_stdio+0x30>
 800164a:	4620      	mov	r0, r4
 800164c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001650:	f000 be7c 	b.w	800234c <_fflush_r>
 8001654:	bd10      	pop	{r4, pc}
 8001656:	bf00      	nop
 8001658:	200000d0 	.word	0x200000d0
 800165c:	20000138 	.word	0x20000138
 8001660:	200001a0 	.word	0x200001a0

08001664 <global_stdio_init.part.0>:
 8001664:	b510      	push	{r4, lr}
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <global_stdio_init.part.0+0x30>)
 8001668:	4c0b      	ldr	r4, [pc, #44]	; (8001698 <global_stdio_init.part.0+0x34>)
 800166a:	4a0c      	ldr	r2, [pc, #48]	; (800169c <global_stdio_init.part.0+0x38>)
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	4620      	mov	r0, r4
 8001670:	2200      	movs	r2, #0
 8001672:	2104      	movs	r1, #4
 8001674:	f7ff ff94 	bl	80015a0 <std>
 8001678:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800167c:	2201      	movs	r2, #1
 800167e:	2109      	movs	r1, #9
 8001680:	f7ff ff8e 	bl	80015a0 <std>
 8001684:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001688:	2202      	movs	r2, #2
 800168a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800168e:	2112      	movs	r1, #18
 8001690:	f7ff bf86 	b.w	80015a0 <std>
 8001694:	20000208 	.word	0x20000208
 8001698:	200000d0 	.word	0x200000d0
 800169c:	0800160d 	.word	0x0800160d

080016a0 <__sfp_lock_acquire>:
 80016a0:	4801      	ldr	r0, [pc, #4]	; (80016a8 <__sfp_lock_acquire+0x8>)
 80016a2:	f000 b9fe 	b.w	8001aa2 <__retarget_lock_acquire_recursive>
 80016a6:	bf00      	nop
 80016a8:	20000211 	.word	0x20000211

080016ac <__sfp_lock_release>:
 80016ac:	4801      	ldr	r0, [pc, #4]	; (80016b4 <__sfp_lock_release+0x8>)
 80016ae:	f000 b9f9 	b.w	8001aa4 <__retarget_lock_release_recursive>
 80016b2:	bf00      	nop
 80016b4:	20000211 	.word	0x20000211

080016b8 <__sinit>:
 80016b8:	b510      	push	{r4, lr}
 80016ba:	4604      	mov	r4, r0
 80016bc:	f7ff fff0 	bl	80016a0 <__sfp_lock_acquire>
 80016c0:	6a23      	ldr	r3, [r4, #32]
 80016c2:	b11b      	cbz	r3, 80016cc <__sinit+0x14>
 80016c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016c8:	f7ff bff0 	b.w	80016ac <__sfp_lock_release>
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__sinit+0x28>)
 80016ce:	6223      	str	r3, [r4, #32]
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__sinit+0x2c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f5      	bne.n	80016c4 <__sinit+0xc>
 80016d8:	f7ff ffc4 	bl	8001664 <global_stdio_init.part.0>
 80016dc:	e7f2      	b.n	80016c4 <__sinit+0xc>
 80016de:	bf00      	nop
 80016e0:	08001625 	.word	0x08001625
 80016e4:	20000208 	.word	0x20000208

080016e8 <_fwalk_sglue>:
 80016e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016ec:	4607      	mov	r7, r0
 80016ee:	4688      	mov	r8, r1
 80016f0:	4614      	mov	r4, r2
 80016f2:	2600      	movs	r6, #0
 80016f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016f8:	f1b9 0901 	subs.w	r9, r9, #1
 80016fc:	d505      	bpl.n	800170a <_fwalk_sglue+0x22>
 80016fe:	6824      	ldr	r4, [r4, #0]
 8001700:	2c00      	cmp	r4, #0
 8001702:	d1f7      	bne.n	80016f4 <_fwalk_sglue+0xc>
 8001704:	4630      	mov	r0, r6
 8001706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800170a:	89ab      	ldrh	r3, [r5, #12]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d907      	bls.n	8001720 <_fwalk_sglue+0x38>
 8001710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001714:	3301      	adds	r3, #1
 8001716:	d003      	beq.n	8001720 <_fwalk_sglue+0x38>
 8001718:	4629      	mov	r1, r5
 800171a:	4638      	mov	r0, r7
 800171c:	47c0      	blx	r8
 800171e:	4306      	orrs	r6, r0
 8001720:	3568      	adds	r5, #104	; 0x68
 8001722:	e7e9      	b.n	80016f8 <_fwalk_sglue+0x10>

08001724 <iprintf>:
 8001724:	b40f      	push	{r0, r1, r2, r3}
 8001726:	b507      	push	{r0, r1, r2, lr}
 8001728:	4906      	ldr	r1, [pc, #24]	; (8001744 <iprintf+0x20>)
 800172a:	ab04      	add	r3, sp, #16
 800172c:	6808      	ldr	r0, [r1, #0]
 800172e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001732:	6881      	ldr	r1, [r0, #8]
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	f000 fad9 	bl	8001cec <_vfiprintf_r>
 800173a:	b003      	add	sp, #12
 800173c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001740:	b004      	add	sp, #16
 8001742:	4770      	bx	lr
 8001744:	2000006c 	.word	0x2000006c

08001748 <_puts_r>:
 8001748:	6a03      	ldr	r3, [r0, #32]
 800174a:	b570      	push	{r4, r5, r6, lr}
 800174c:	6884      	ldr	r4, [r0, #8]
 800174e:	4605      	mov	r5, r0
 8001750:	460e      	mov	r6, r1
 8001752:	b90b      	cbnz	r3, 8001758 <_puts_r+0x10>
 8001754:	f7ff ffb0 	bl	80016b8 <__sinit>
 8001758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800175a:	07db      	lsls	r3, r3, #31
 800175c:	d405      	bmi.n	800176a <_puts_r+0x22>
 800175e:	89a3      	ldrh	r3, [r4, #12]
 8001760:	0598      	lsls	r0, r3, #22
 8001762:	d402      	bmi.n	800176a <_puts_r+0x22>
 8001764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001766:	f000 f99c 	bl	8001aa2 <__retarget_lock_acquire_recursive>
 800176a:	89a3      	ldrh	r3, [r4, #12]
 800176c:	0719      	lsls	r1, r3, #28
 800176e:	d513      	bpl.n	8001798 <_puts_r+0x50>
 8001770:	6923      	ldr	r3, [r4, #16]
 8001772:	b18b      	cbz	r3, 8001798 <_puts_r+0x50>
 8001774:	3e01      	subs	r6, #1
 8001776:	68a3      	ldr	r3, [r4, #8]
 8001778:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800177c:	3b01      	subs	r3, #1
 800177e:	60a3      	str	r3, [r4, #8]
 8001780:	b9e9      	cbnz	r1, 80017be <_puts_r+0x76>
 8001782:	2b00      	cmp	r3, #0
 8001784:	da2e      	bge.n	80017e4 <_puts_r+0x9c>
 8001786:	4622      	mov	r2, r4
 8001788:	210a      	movs	r1, #10
 800178a:	4628      	mov	r0, r5
 800178c:	f000 f87b 	bl	8001886 <__swbuf_r>
 8001790:	3001      	adds	r0, #1
 8001792:	d007      	beq.n	80017a4 <_puts_r+0x5c>
 8001794:	250a      	movs	r5, #10
 8001796:	e007      	b.n	80017a8 <_puts_r+0x60>
 8001798:	4621      	mov	r1, r4
 800179a:	4628      	mov	r0, r5
 800179c:	f000 f8b0 	bl	8001900 <__swsetup_r>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d0e7      	beq.n	8001774 <_puts_r+0x2c>
 80017a4:	f04f 35ff 	mov.w	r5, #4294967295
 80017a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017aa:	07da      	lsls	r2, r3, #31
 80017ac:	d405      	bmi.n	80017ba <_puts_r+0x72>
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	059b      	lsls	r3, r3, #22
 80017b2:	d402      	bmi.n	80017ba <_puts_r+0x72>
 80017b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017b6:	f000 f975 	bl	8001aa4 <__retarget_lock_release_recursive>
 80017ba:	4628      	mov	r0, r5
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
 80017be:	2b00      	cmp	r3, #0
 80017c0:	da04      	bge.n	80017cc <_puts_r+0x84>
 80017c2:	69a2      	ldr	r2, [r4, #24]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dc06      	bgt.n	80017d6 <_puts_r+0x8e>
 80017c8:	290a      	cmp	r1, #10
 80017ca:	d004      	beq.n	80017d6 <_puts_r+0x8e>
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	6022      	str	r2, [r4, #0]
 80017d2:	7019      	strb	r1, [r3, #0]
 80017d4:	e7cf      	b.n	8001776 <_puts_r+0x2e>
 80017d6:	4622      	mov	r2, r4
 80017d8:	4628      	mov	r0, r5
 80017da:	f000 f854 	bl	8001886 <__swbuf_r>
 80017de:	3001      	adds	r0, #1
 80017e0:	d1c9      	bne.n	8001776 <_puts_r+0x2e>
 80017e2:	e7df      	b.n	80017a4 <_puts_r+0x5c>
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	250a      	movs	r5, #10
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	6022      	str	r2, [r4, #0]
 80017ec:	701d      	strb	r5, [r3, #0]
 80017ee:	e7db      	b.n	80017a8 <_puts_r+0x60>

080017f0 <puts>:
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <puts+0xc>)
 80017f2:	4601      	mov	r1, r0
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	f7ff bfa7 	b.w	8001748 <_puts_r>
 80017fa:	bf00      	nop
 80017fc:	2000006c 	.word	0x2000006c

08001800 <__sread>:
 8001800:	b510      	push	{r4, lr}
 8001802:	460c      	mov	r4, r1
 8001804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001808:	f000 f8fc 	bl	8001a04 <_read_r>
 800180c:	2800      	cmp	r0, #0
 800180e:	bfab      	itete	ge
 8001810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001812:	89a3      	ldrhlt	r3, [r4, #12]
 8001814:	181b      	addge	r3, r3, r0
 8001816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800181a:	bfac      	ite	ge
 800181c:	6563      	strge	r3, [r4, #84]	; 0x54
 800181e:	81a3      	strhlt	r3, [r4, #12]
 8001820:	bd10      	pop	{r4, pc}

08001822 <__swrite>:
 8001822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001826:	461f      	mov	r7, r3
 8001828:	898b      	ldrh	r3, [r1, #12]
 800182a:	05db      	lsls	r3, r3, #23
 800182c:	4605      	mov	r5, r0
 800182e:	460c      	mov	r4, r1
 8001830:	4616      	mov	r6, r2
 8001832:	d505      	bpl.n	8001840 <__swrite+0x1e>
 8001834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001838:	2302      	movs	r3, #2
 800183a:	2200      	movs	r2, #0
 800183c:	f000 f8d0 	bl	80019e0 <_lseek_r>
 8001840:	89a3      	ldrh	r3, [r4, #12]
 8001842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800184a:	81a3      	strh	r3, [r4, #12]
 800184c:	4632      	mov	r2, r6
 800184e:	463b      	mov	r3, r7
 8001850:	4628      	mov	r0, r5
 8001852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001856:	f000 b8e7 	b.w	8001a28 <_write_r>

0800185a <__sseek>:
 800185a:	b510      	push	{r4, lr}
 800185c:	460c      	mov	r4, r1
 800185e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001862:	f000 f8bd 	bl	80019e0 <_lseek_r>
 8001866:	1c43      	adds	r3, r0, #1
 8001868:	89a3      	ldrh	r3, [r4, #12]
 800186a:	bf15      	itete	ne
 800186c:	6560      	strne	r0, [r4, #84]	; 0x54
 800186e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001876:	81a3      	strheq	r3, [r4, #12]
 8001878:	bf18      	it	ne
 800187a:	81a3      	strhne	r3, [r4, #12]
 800187c:	bd10      	pop	{r4, pc}

0800187e <__sclose>:
 800187e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001882:	f000 b89d 	b.w	80019c0 <_close_r>

08001886 <__swbuf_r>:
 8001886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001888:	460e      	mov	r6, r1
 800188a:	4614      	mov	r4, r2
 800188c:	4605      	mov	r5, r0
 800188e:	b118      	cbz	r0, 8001898 <__swbuf_r+0x12>
 8001890:	6a03      	ldr	r3, [r0, #32]
 8001892:	b90b      	cbnz	r3, 8001898 <__swbuf_r+0x12>
 8001894:	f7ff ff10 	bl	80016b8 <__sinit>
 8001898:	69a3      	ldr	r3, [r4, #24]
 800189a:	60a3      	str	r3, [r4, #8]
 800189c:	89a3      	ldrh	r3, [r4, #12]
 800189e:	071a      	lsls	r2, r3, #28
 80018a0:	d525      	bpl.n	80018ee <__swbuf_r+0x68>
 80018a2:	6923      	ldr	r3, [r4, #16]
 80018a4:	b31b      	cbz	r3, 80018ee <__swbuf_r+0x68>
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	6922      	ldr	r2, [r4, #16]
 80018aa:	1a98      	subs	r0, r3, r2
 80018ac:	6963      	ldr	r3, [r4, #20]
 80018ae:	b2f6      	uxtb	r6, r6
 80018b0:	4283      	cmp	r3, r0
 80018b2:	4637      	mov	r7, r6
 80018b4:	dc04      	bgt.n	80018c0 <__swbuf_r+0x3a>
 80018b6:	4621      	mov	r1, r4
 80018b8:	4628      	mov	r0, r5
 80018ba:	f000 fd47 	bl	800234c <_fflush_r>
 80018be:	b9e0      	cbnz	r0, 80018fa <__swbuf_r+0x74>
 80018c0:	68a3      	ldr	r3, [r4, #8]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	60a3      	str	r3, [r4, #8]
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	6022      	str	r2, [r4, #0]
 80018cc:	701e      	strb	r6, [r3, #0]
 80018ce:	6962      	ldr	r2, [r4, #20]
 80018d0:	1c43      	adds	r3, r0, #1
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d004      	beq.n	80018e0 <__swbuf_r+0x5a>
 80018d6:	89a3      	ldrh	r3, [r4, #12]
 80018d8:	07db      	lsls	r3, r3, #31
 80018da:	d506      	bpl.n	80018ea <__swbuf_r+0x64>
 80018dc:	2e0a      	cmp	r6, #10
 80018de:	d104      	bne.n	80018ea <__swbuf_r+0x64>
 80018e0:	4621      	mov	r1, r4
 80018e2:	4628      	mov	r0, r5
 80018e4:	f000 fd32 	bl	800234c <_fflush_r>
 80018e8:	b938      	cbnz	r0, 80018fa <__swbuf_r+0x74>
 80018ea:	4638      	mov	r0, r7
 80018ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ee:	4621      	mov	r1, r4
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 f805 	bl	8001900 <__swsetup_r>
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d0d5      	beq.n	80018a6 <__swbuf_r+0x20>
 80018fa:	f04f 37ff 	mov.w	r7, #4294967295
 80018fe:	e7f4      	b.n	80018ea <__swbuf_r+0x64>

08001900 <__swsetup_r>:
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <__swsetup_r+0xac>)
 8001904:	4605      	mov	r5, r0
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	460c      	mov	r4, r1
 800190a:	b118      	cbz	r0, 8001914 <__swsetup_r+0x14>
 800190c:	6a03      	ldr	r3, [r0, #32]
 800190e:	b90b      	cbnz	r3, 8001914 <__swsetup_r+0x14>
 8001910:	f7ff fed2 	bl	80016b8 <__sinit>
 8001914:	89a3      	ldrh	r3, [r4, #12]
 8001916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800191a:	0718      	lsls	r0, r3, #28
 800191c:	d422      	bmi.n	8001964 <__swsetup_r+0x64>
 800191e:	06d9      	lsls	r1, r3, #27
 8001920:	d407      	bmi.n	8001932 <__swsetup_r+0x32>
 8001922:	2309      	movs	r3, #9
 8001924:	602b      	str	r3, [r5, #0]
 8001926:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800192a:	81a3      	strh	r3, [r4, #12]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	e034      	b.n	800199c <__swsetup_r+0x9c>
 8001932:	0758      	lsls	r0, r3, #29
 8001934:	d512      	bpl.n	800195c <__swsetup_r+0x5c>
 8001936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001938:	b141      	cbz	r1, 800194c <__swsetup_r+0x4c>
 800193a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800193e:	4299      	cmp	r1, r3
 8001940:	d002      	beq.n	8001948 <__swsetup_r+0x48>
 8001942:	4628      	mov	r0, r5
 8001944:	f000 f8b0 	bl	8001aa8 <_free_r>
 8001948:	2300      	movs	r3, #0
 800194a:	6363      	str	r3, [r4, #52]	; 0x34
 800194c:	89a3      	ldrh	r3, [r4, #12]
 800194e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001952:	81a3      	strh	r3, [r4, #12]
 8001954:	2300      	movs	r3, #0
 8001956:	6063      	str	r3, [r4, #4]
 8001958:	6923      	ldr	r3, [r4, #16]
 800195a:	6023      	str	r3, [r4, #0]
 800195c:	89a3      	ldrh	r3, [r4, #12]
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	81a3      	strh	r3, [r4, #12]
 8001964:	6923      	ldr	r3, [r4, #16]
 8001966:	b94b      	cbnz	r3, 800197c <__swsetup_r+0x7c>
 8001968:	89a3      	ldrh	r3, [r4, #12]
 800196a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800196e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001972:	d003      	beq.n	800197c <__swsetup_r+0x7c>
 8001974:	4621      	mov	r1, r4
 8001976:	4628      	mov	r0, r5
 8001978:	f000 fd36 	bl	80023e8 <__smakebuf_r>
 800197c:	89a0      	ldrh	r0, [r4, #12]
 800197e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001982:	f010 0301 	ands.w	r3, r0, #1
 8001986:	d00a      	beq.n	800199e <__swsetup_r+0x9e>
 8001988:	2300      	movs	r3, #0
 800198a:	60a3      	str	r3, [r4, #8]
 800198c:	6963      	ldr	r3, [r4, #20]
 800198e:	425b      	negs	r3, r3
 8001990:	61a3      	str	r3, [r4, #24]
 8001992:	6923      	ldr	r3, [r4, #16]
 8001994:	b943      	cbnz	r3, 80019a8 <__swsetup_r+0xa8>
 8001996:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800199a:	d1c4      	bne.n	8001926 <__swsetup_r+0x26>
 800199c:	bd38      	pop	{r3, r4, r5, pc}
 800199e:	0781      	lsls	r1, r0, #30
 80019a0:	bf58      	it	pl
 80019a2:	6963      	ldrpl	r3, [r4, #20]
 80019a4:	60a3      	str	r3, [r4, #8]
 80019a6:	e7f4      	b.n	8001992 <__swsetup_r+0x92>
 80019a8:	2000      	movs	r0, #0
 80019aa:	e7f7      	b.n	800199c <__swsetup_r+0x9c>
 80019ac:	2000006c 	.word	0x2000006c

080019b0 <memset>:
 80019b0:	4402      	add	r2, r0
 80019b2:	4603      	mov	r3, r0
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d100      	bne.n	80019ba <memset+0xa>
 80019b8:	4770      	bx	lr
 80019ba:	f803 1b01 	strb.w	r1, [r3], #1
 80019be:	e7f9      	b.n	80019b4 <memset+0x4>

080019c0 <_close_r>:
 80019c0:	b538      	push	{r3, r4, r5, lr}
 80019c2:	4d06      	ldr	r5, [pc, #24]	; (80019dc <_close_r+0x1c>)
 80019c4:	2300      	movs	r3, #0
 80019c6:	4604      	mov	r4, r0
 80019c8:	4608      	mov	r0, r1
 80019ca:	602b      	str	r3, [r5, #0]
 80019cc:	f7fe fe31 	bl	8000632 <_close>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d102      	bne.n	80019da <_close_r+0x1a>
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	b103      	cbz	r3, 80019da <_close_r+0x1a>
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	bd38      	pop	{r3, r4, r5, pc}
 80019dc:	2000020c 	.word	0x2000020c

080019e0 <_lseek_r>:
 80019e0:	b538      	push	{r3, r4, r5, lr}
 80019e2:	4d07      	ldr	r5, [pc, #28]	; (8001a00 <_lseek_r+0x20>)
 80019e4:	4604      	mov	r4, r0
 80019e6:	4608      	mov	r0, r1
 80019e8:	4611      	mov	r1, r2
 80019ea:	2200      	movs	r2, #0
 80019ec:	602a      	str	r2, [r5, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7fe fe46 	bl	8000680 <_lseek>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	d102      	bne.n	80019fe <_lseek_r+0x1e>
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	b103      	cbz	r3, 80019fe <_lseek_r+0x1e>
 80019fc:	6023      	str	r3, [r4, #0]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	2000020c 	.word	0x2000020c

08001a04 <_read_r>:
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	4d07      	ldr	r5, [pc, #28]	; (8001a24 <_read_r+0x20>)
 8001a08:	4604      	mov	r4, r0
 8001a0a:	4608      	mov	r0, r1
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	2200      	movs	r2, #0
 8001a10:	602a      	str	r2, [r5, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f7fe fdd4 	bl	80005c0 <_read>
 8001a18:	1c43      	adds	r3, r0, #1
 8001a1a:	d102      	bne.n	8001a22 <_read_r+0x1e>
 8001a1c:	682b      	ldr	r3, [r5, #0]
 8001a1e:	b103      	cbz	r3, 8001a22 <_read_r+0x1e>
 8001a20:	6023      	str	r3, [r4, #0]
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
 8001a24:	2000020c 	.word	0x2000020c

08001a28 <_write_r>:
 8001a28:	b538      	push	{r3, r4, r5, lr}
 8001a2a:	4d07      	ldr	r5, [pc, #28]	; (8001a48 <_write_r+0x20>)
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	4608      	mov	r0, r1
 8001a30:	4611      	mov	r1, r2
 8001a32:	2200      	movs	r2, #0
 8001a34:	602a      	str	r2, [r5, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f7fe fddf 	bl	80005fa <_write>
 8001a3c:	1c43      	adds	r3, r0, #1
 8001a3e:	d102      	bne.n	8001a46 <_write_r+0x1e>
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	b103      	cbz	r3, 8001a46 <_write_r+0x1e>
 8001a44:	6023      	str	r3, [r4, #0]
 8001a46:	bd38      	pop	{r3, r4, r5, pc}
 8001a48:	2000020c 	.word	0x2000020c

08001a4c <__errno>:
 8001a4c:	4b01      	ldr	r3, [pc, #4]	; (8001a54 <__errno+0x8>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2000006c 	.word	0x2000006c

08001a58 <__libc_init_array>:
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	4d0d      	ldr	r5, [pc, #52]	; (8001a90 <__libc_init_array+0x38>)
 8001a5c:	4c0d      	ldr	r4, [pc, #52]	; (8001a94 <__libc_init_array+0x3c>)
 8001a5e:	1b64      	subs	r4, r4, r5
 8001a60:	10a4      	asrs	r4, r4, #2
 8001a62:	2600      	movs	r6, #0
 8001a64:	42a6      	cmp	r6, r4
 8001a66:	d109      	bne.n	8001a7c <__libc_init_array+0x24>
 8001a68:	4d0b      	ldr	r5, [pc, #44]	; (8001a98 <__libc_init_array+0x40>)
 8001a6a:	4c0c      	ldr	r4, [pc, #48]	; (8001a9c <__libc_init_array+0x44>)
 8001a6c:	f000 fd2a 	bl	80024c4 <_init>
 8001a70:	1b64      	subs	r4, r4, r5
 8001a72:	10a4      	asrs	r4, r4, #2
 8001a74:	2600      	movs	r6, #0
 8001a76:	42a6      	cmp	r6, r4
 8001a78:	d105      	bne.n	8001a86 <__libc_init_array+0x2e>
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a80:	4798      	blx	r3
 8001a82:	3601      	adds	r6, #1
 8001a84:	e7ee      	b.n	8001a64 <__libc_init_array+0xc>
 8001a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a8a:	4798      	blx	r3
 8001a8c:	3601      	adds	r6, #1
 8001a8e:	e7f2      	b.n	8001a76 <__libc_init_array+0x1e>
 8001a90:	080025dc 	.word	0x080025dc
 8001a94:	080025dc 	.word	0x080025dc
 8001a98:	080025dc 	.word	0x080025dc
 8001a9c:	080025e0 	.word	0x080025e0

08001aa0 <__retarget_lock_init_recursive>:
 8001aa0:	4770      	bx	lr

08001aa2 <__retarget_lock_acquire_recursive>:
 8001aa2:	4770      	bx	lr

08001aa4 <__retarget_lock_release_recursive>:
 8001aa4:	4770      	bx	lr
	...

08001aa8 <_free_r>:
 8001aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001aaa:	2900      	cmp	r1, #0
 8001aac:	d044      	beq.n	8001b38 <_free_r+0x90>
 8001aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ab2:	9001      	str	r0, [sp, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8001aba:	bfb8      	it	lt
 8001abc:	18e4      	addlt	r4, r4, r3
 8001abe:	f000 f8df 	bl	8001c80 <__malloc_lock>
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <_free_r+0x94>)
 8001ac4:	9801      	ldr	r0, [sp, #4]
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	b933      	cbnz	r3, 8001ad8 <_free_r+0x30>
 8001aca:	6063      	str	r3, [r4, #4]
 8001acc:	6014      	str	r4, [r2, #0]
 8001ace:	b003      	add	sp, #12
 8001ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ad4:	f000 b8da 	b.w	8001c8c <__malloc_unlock>
 8001ad8:	42a3      	cmp	r3, r4
 8001ada:	d908      	bls.n	8001aee <_free_r+0x46>
 8001adc:	6825      	ldr	r5, [r4, #0]
 8001ade:	1961      	adds	r1, r4, r5
 8001ae0:	428b      	cmp	r3, r1
 8001ae2:	bf01      	itttt	eq
 8001ae4:	6819      	ldreq	r1, [r3, #0]
 8001ae6:	685b      	ldreq	r3, [r3, #4]
 8001ae8:	1949      	addeq	r1, r1, r5
 8001aea:	6021      	streq	r1, [r4, #0]
 8001aec:	e7ed      	b.n	8001aca <_free_r+0x22>
 8001aee:	461a      	mov	r2, r3
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	b10b      	cbz	r3, 8001af8 <_free_r+0x50>
 8001af4:	42a3      	cmp	r3, r4
 8001af6:	d9fa      	bls.n	8001aee <_free_r+0x46>
 8001af8:	6811      	ldr	r1, [r2, #0]
 8001afa:	1855      	adds	r5, r2, r1
 8001afc:	42a5      	cmp	r5, r4
 8001afe:	d10b      	bne.n	8001b18 <_free_r+0x70>
 8001b00:	6824      	ldr	r4, [r4, #0]
 8001b02:	4421      	add	r1, r4
 8001b04:	1854      	adds	r4, r2, r1
 8001b06:	42a3      	cmp	r3, r4
 8001b08:	6011      	str	r1, [r2, #0]
 8001b0a:	d1e0      	bne.n	8001ace <_free_r+0x26>
 8001b0c:	681c      	ldr	r4, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	6053      	str	r3, [r2, #4]
 8001b12:	440c      	add	r4, r1
 8001b14:	6014      	str	r4, [r2, #0]
 8001b16:	e7da      	b.n	8001ace <_free_r+0x26>
 8001b18:	d902      	bls.n	8001b20 <_free_r+0x78>
 8001b1a:	230c      	movs	r3, #12
 8001b1c:	6003      	str	r3, [r0, #0]
 8001b1e:	e7d6      	b.n	8001ace <_free_r+0x26>
 8001b20:	6825      	ldr	r5, [r4, #0]
 8001b22:	1961      	adds	r1, r4, r5
 8001b24:	428b      	cmp	r3, r1
 8001b26:	bf04      	itt	eq
 8001b28:	6819      	ldreq	r1, [r3, #0]
 8001b2a:	685b      	ldreq	r3, [r3, #4]
 8001b2c:	6063      	str	r3, [r4, #4]
 8001b2e:	bf04      	itt	eq
 8001b30:	1949      	addeq	r1, r1, r5
 8001b32:	6021      	streq	r1, [r4, #0]
 8001b34:	6054      	str	r4, [r2, #4]
 8001b36:	e7ca      	b.n	8001ace <_free_r+0x26>
 8001b38:	b003      	add	sp, #12
 8001b3a:	bd30      	pop	{r4, r5, pc}
 8001b3c:	20000214 	.word	0x20000214

08001b40 <sbrk_aligned>:
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	4e0e      	ldr	r6, [pc, #56]	; (8001b7c <sbrk_aligned+0x3c>)
 8001b44:	460c      	mov	r4, r1
 8001b46:	6831      	ldr	r1, [r6, #0]
 8001b48:	4605      	mov	r5, r0
 8001b4a:	b911      	cbnz	r1, 8001b52 <sbrk_aligned+0x12>
 8001b4c:	f000 fcaa 	bl	80024a4 <_sbrk_r>
 8001b50:	6030      	str	r0, [r6, #0]
 8001b52:	4621      	mov	r1, r4
 8001b54:	4628      	mov	r0, r5
 8001b56:	f000 fca5 	bl	80024a4 <_sbrk_r>
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	d00a      	beq.n	8001b74 <sbrk_aligned+0x34>
 8001b5e:	1cc4      	adds	r4, r0, #3
 8001b60:	f024 0403 	bic.w	r4, r4, #3
 8001b64:	42a0      	cmp	r0, r4
 8001b66:	d007      	beq.n	8001b78 <sbrk_aligned+0x38>
 8001b68:	1a21      	subs	r1, r4, r0
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f000 fc9a 	bl	80024a4 <_sbrk_r>
 8001b70:	3001      	adds	r0, #1
 8001b72:	d101      	bne.n	8001b78 <sbrk_aligned+0x38>
 8001b74:	f04f 34ff 	mov.w	r4, #4294967295
 8001b78:	4620      	mov	r0, r4
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}
 8001b7c:	20000218 	.word	0x20000218

08001b80 <_malloc_r>:
 8001b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b84:	1ccd      	adds	r5, r1, #3
 8001b86:	f025 0503 	bic.w	r5, r5, #3
 8001b8a:	3508      	adds	r5, #8
 8001b8c:	2d0c      	cmp	r5, #12
 8001b8e:	bf38      	it	cc
 8001b90:	250c      	movcc	r5, #12
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	4607      	mov	r7, r0
 8001b96:	db01      	blt.n	8001b9c <_malloc_r+0x1c>
 8001b98:	42a9      	cmp	r1, r5
 8001b9a:	d905      	bls.n	8001ba8 <_malloc_r+0x28>
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	2600      	movs	r6, #0
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ba8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001c7c <_malloc_r+0xfc>
 8001bac:	f000 f868 	bl	8001c80 <__malloc_lock>
 8001bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8001bb4:	461c      	mov	r4, r3
 8001bb6:	bb5c      	cbnz	r4, 8001c10 <_malloc_r+0x90>
 8001bb8:	4629      	mov	r1, r5
 8001bba:	4638      	mov	r0, r7
 8001bbc:	f7ff ffc0 	bl	8001b40 <sbrk_aligned>
 8001bc0:	1c43      	adds	r3, r0, #1
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	d155      	bne.n	8001c72 <_malloc_r+0xf2>
 8001bc6:	f8d8 4000 	ldr.w	r4, [r8]
 8001bca:	4626      	mov	r6, r4
 8001bcc:	2e00      	cmp	r6, #0
 8001bce:	d145      	bne.n	8001c5c <_malloc_r+0xdc>
 8001bd0:	2c00      	cmp	r4, #0
 8001bd2:	d048      	beq.n	8001c66 <_malloc_r+0xe6>
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	4631      	mov	r1, r6
 8001bd8:	4638      	mov	r0, r7
 8001bda:	eb04 0903 	add.w	r9, r4, r3
 8001bde:	f000 fc61 	bl	80024a4 <_sbrk_r>
 8001be2:	4581      	cmp	r9, r0
 8001be4:	d13f      	bne.n	8001c66 <_malloc_r+0xe6>
 8001be6:	6821      	ldr	r1, [r4, #0]
 8001be8:	1a6d      	subs	r5, r5, r1
 8001bea:	4629      	mov	r1, r5
 8001bec:	4638      	mov	r0, r7
 8001bee:	f7ff ffa7 	bl	8001b40 <sbrk_aligned>
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	d037      	beq.n	8001c66 <_malloc_r+0xe6>
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	442b      	add	r3, r5
 8001bfa:	6023      	str	r3, [r4, #0]
 8001bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d038      	beq.n	8001c76 <_malloc_r+0xf6>
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d12b      	bne.n	8001c62 <_malloc_r+0xe2>
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	e00f      	b.n	8001c30 <_malloc_r+0xb0>
 8001c10:	6822      	ldr	r2, [r4, #0]
 8001c12:	1b52      	subs	r2, r2, r5
 8001c14:	d41f      	bmi.n	8001c56 <_malloc_r+0xd6>
 8001c16:	2a0b      	cmp	r2, #11
 8001c18:	d917      	bls.n	8001c4a <_malloc_r+0xca>
 8001c1a:	1961      	adds	r1, r4, r5
 8001c1c:	42a3      	cmp	r3, r4
 8001c1e:	6025      	str	r5, [r4, #0]
 8001c20:	bf18      	it	ne
 8001c22:	6059      	strne	r1, [r3, #4]
 8001c24:	6863      	ldr	r3, [r4, #4]
 8001c26:	bf08      	it	eq
 8001c28:	f8c8 1000 	streq.w	r1, [r8]
 8001c2c:	5162      	str	r2, [r4, r5]
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	4638      	mov	r0, r7
 8001c32:	f104 060b 	add.w	r6, r4, #11
 8001c36:	f000 f829 	bl	8001c8c <__malloc_unlock>
 8001c3a:	f026 0607 	bic.w	r6, r6, #7
 8001c3e:	1d23      	adds	r3, r4, #4
 8001c40:	1af2      	subs	r2, r6, r3
 8001c42:	d0ae      	beq.n	8001ba2 <_malloc_r+0x22>
 8001c44:	1b9b      	subs	r3, r3, r6
 8001c46:	50a3      	str	r3, [r4, r2]
 8001c48:	e7ab      	b.n	8001ba2 <_malloc_r+0x22>
 8001c4a:	42a3      	cmp	r3, r4
 8001c4c:	6862      	ldr	r2, [r4, #4]
 8001c4e:	d1dd      	bne.n	8001c0c <_malloc_r+0x8c>
 8001c50:	f8c8 2000 	str.w	r2, [r8]
 8001c54:	e7ec      	b.n	8001c30 <_malloc_r+0xb0>
 8001c56:	4623      	mov	r3, r4
 8001c58:	6864      	ldr	r4, [r4, #4]
 8001c5a:	e7ac      	b.n	8001bb6 <_malloc_r+0x36>
 8001c5c:	4634      	mov	r4, r6
 8001c5e:	6876      	ldr	r6, [r6, #4]
 8001c60:	e7b4      	b.n	8001bcc <_malloc_r+0x4c>
 8001c62:	4613      	mov	r3, r2
 8001c64:	e7cc      	b.n	8001c00 <_malloc_r+0x80>
 8001c66:	230c      	movs	r3, #12
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	f000 f80e 	bl	8001c8c <__malloc_unlock>
 8001c70:	e797      	b.n	8001ba2 <_malloc_r+0x22>
 8001c72:	6025      	str	r5, [r4, #0]
 8001c74:	e7dc      	b.n	8001c30 <_malloc_r+0xb0>
 8001c76:	605b      	str	r3, [r3, #4]
 8001c78:	deff      	udf	#255	; 0xff
 8001c7a:	bf00      	nop
 8001c7c:	20000214 	.word	0x20000214

08001c80 <__malloc_lock>:
 8001c80:	4801      	ldr	r0, [pc, #4]	; (8001c88 <__malloc_lock+0x8>)
 8001c82:	f7ff bf0e 	b.w	8001aa2 <__retarget_lock_acquire_recursive>
 8001c86:	bf00      	nop
 8001c88:	20000210 	.word	0x20000210

08001c8c <__malloc_unlock>:
 8001c8c:	4801      	ldr	r0, [pc, #4]	; (8001c94 <__malloc_unlock+0x8>)
 8001c8e:	f7ff bf09 	b.w	8001aa4 <__retarget_lock_release_recursive>
 8001c92:	bf00      	nop
 8001c94:	20000210 	.word	0x20000210

08001c98 <__sfputc_r>:
 8001c98:	6893      	ldr	r3, [r2, #8]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	b410      	push	{r4}
 8001ca0:	6093      	str	r3, [r2, #8]
 8001ca2:	da08      	bge.n	8001cb6 <__sfputc_r+0x1e>
 8001ca4:	6994      	ldr	r4, [r2, #24]
 8001ca6:	42a3      	cmp	r3, r4
 8001ca8:	db01      	blt.n	8001cae <__sfputc_r+0x16>
 8001caa:	290a      	cmp	r1, #10
 8001cac:	d103      	bne.n	8001cb6 <__sfputc_r+0x1e>
 8001cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cb2:	f7ff bde8 	b.w	8001886 <__swbuf_r>
 8001cb6:	6813      	ldr	r3, [r2, #0]
 8001cb8:	1c58      	adds	r0, r3, #1
 8001cba:	6010      	str	r0, [r2, #0]
 8001cbc:	7019      	strb	r1, [r3, #0]
 8001cbe:	4608      	mov	r0, r1
 8001cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <__sfputs_r>:
 8001cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc8:	4606      	mov	r6, r0
 8001cca:	460f      	mov	r7, r1
 8001ccc:	4614      	mov	r4, r2
 8001cce:	18d5      	adds	r5, r2, r3
 8001cd0:	42ac      	cmp	r4, r5
 8001cd2:	d101      	bne.n	8001cd8 <__sfputs_r+0x12>
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	e007      	b.n	8001ce8 <__sfputs_r+0x22>
 8001cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cdc:	463a      	mov	r2, r7
 8001cde:	4630      	mov	r0, r6
 8001ce0:	f7ff ffda 	bl	8001c98 <__sfputc_r>
 8001ce4:	1c43      	adds	r3, r0, #1
 8001ce6:	d1f3      	bne.n	8001cd0 <__sfputs_r+0xa>
 8001ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cec <_vfiprintf_r>:
 8001cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf0:	460d      	mov	r5, r1
 8001cf2:	b09d      	sub	sp, #116	; 0x74
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	4698      	mov	r8, r3
 8001cf8:	4606      	mov	r6, r0
 8001cfa:	b118      	cbz	r0, 8001d04 <_vfiprintf_r+0x18>
 8001cfc:	6a03      	ldr	r3, [r0, #32]
 8001cfe:	b90b      	cbnz	r3, 8001d04 <_vfiprintf_r+0x18>
 8001d00:	f7ff fcda 	bl	80016b8 <__sinit>
 8001d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d06:	07d9      	lsls	r1, r3, #31
 8001d08:	d405      	bmi.n	8001d16 <_vfiprintf_r+0x2a>
 8001d0a:	89ab      	ldrh	r3, [r5, #12]
 8001d0c:	059a      	lsls	r2, r3, #22
 8001d0e:	d402      	bmi.n	8001d16 <_vfiprintf_r+0x2a>
 8001d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d12:	f7ff fec6 	bl	8001aa2 <__retarget_lock_acquire_recursive>
 8001d16:	89ab      	ldrh	r3, [r5, #12]
 8001d18:	071b      	lsls	r3, r3, #28
 8001d1a:	d501      	bpl.n	8001d20 <_vfiprintf_r+0x34>
 8001d1c:	692b      	ldr	r3, [r5, #16]
 8001d1e:	b99b      	cbnz	r3, 8001d48 <_vfiprintf_r+0x5c>
 8001d20:	4629      	mov	r1, r5
 8001d22:	4630      	mov	r0, r6
 8001d24:	f7ff fdec 	bl	8001900 <__swsetup_r>
 8001d28:	b170      	cbz	r0, 8001d48 <_vfiprintf_r+0x5c>
 8001d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d2c:	07dc      	lsls	r4, r3, #31
 8001d2e:	d504      	bpl.n	8001d3a <_vfiprintf_r+0x4e>
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	b01d      	add	sp, #116	; 0x74
 8001d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d3a:	89ab      	ldrh	r3, [r5, #12]
 8001d3c:	0598      	lsls	r0, r3, #22
 8001d3e:	d4f7      	bmi.n	8001d30 <_vfiprintf_r+0x44>
 8001d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d42:	f7ff feaf 	bl	8001aa4 <__retarget_lock_release_recursive>
 8001d46:	e7f3      	b.n	8001d30 <_vfiprintf_r+0x44>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d56:	2330      	movs	r3, #48	; 0x30
 8001d58:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001f0c <_vfiprintf_r+0x220>
 8001d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d60:	f04f 0901 	mov.w	r9, #1
 8001d64:	4623      	mov	r3, r4
 8001d66:	469a      	mov	sl, r3
 8001d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d6c:	b10a      	cbz	r2, 8001d72 <_vfiprintf_r+0x86>
 8001d6e:	2a25      	cmp	r2, #37	; 0x25
 8001d70:	d1f9      	bne.n	8001d66 <_vfiprintf_r+0x7a>
 8001d72:	ebba 0b04 	subs.w	fp, sl, r4
 8001d76:	d00b      	beq.n	8001d90 <_vfiprintf_r+0xa4>
 8001d78:	465b      	mov	r3, fp
 8001d7a:	4622      	mov	r2, r4
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	4630      	mov	r0, r6
 8001d80:	f7ff ffa1 	bl	8001cc6 <__sfputs_r>
 8001d84:	3001      	adds	r0, #1
 8001d86:	f000 80a9 	beq.w	8001edc <_vfiprintf_r+0x1f0>
 8001d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d8c:	445a      	add	r2, fp
 8001d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8001d90:	f89a 3000 	ldrb.w	r3, [sl]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a1 	beq.w	8001edc <_vfiprintf_r+0x1f0>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001da4:	f10a 0a01 	add.w	sl, sl, #1
 8001da8:	9304      	str	r3, [sp, #16]
 8001daa:	9307      	str	r3, [sp, #28]
 8001dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001db0:	931a      	str	r3, [sp, #104]	; 0x68
 8001db2:	4654      	mov	r4, sl
 8001db4:	2205      	movs	r2, #5
 8001db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dba:	4854      	ldr	r0, [pc, #336]	; (8001f0c <_vfiprintf_r+0x220>)
 8001dbc:	f7fe fa10 	bl	80001e0 <memchr>
 8001dc0:	9a04      	ldr	r2, [sp, #16]
 8001dc2:	b9d8      	cbnz	r0, 8001dfc <_vfiprintf_r+0x110>
 8001dc4:	06d1      	lsls	r1, r2, #27
 8001dc6:	bf44      	itt	mi
 8001dc8:	2320      	movmi	r3, #32
 8001dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dce:	0713      	lsls	r3, r2, #28
 8001dd0:	bf44      	itt	mi
 8001dd2:	232b      	movmi	r3, #43	; 0x2b
 8001dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8001ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8001dde:	d015      	beq.n	8001e0c <_vfiprintf_r+0x120>
 8001de0:	9a07      	ldr	r2, [sp, #28]
 8001de2:	4654      	mov	r4, sl
 8001de4:	2000      	movs	r0, #0
 8001de6:	f04f 0c0a 	mov.w	ip, #10
 8001dea:	4621      	mov	r1, r4
 8001dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001df0:	3b30      	subs	r3, #48	; 0x30
 8001df2:	2b09      	cmp	r3, #9
 8001df4:	d94d      	bls.n	8001e92 <_vfiprintf_r+0x1a6>
 8001df6:	b1b0      	cbz	r0, 8001e26 <_vfiprintf_r+0x13a>
 8001df8:	9207      	str	r2, [sp, #28]
 8001dfa:	e014      	b.n	8001e26 <_vfiprintf_r+0x13a>
 8001dfc:	eba0 0308 	sub.w	r3, r0, r8
 8001e00:	fa09 f303 	lsl.w	r3, r9, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	9304      	str	r3, [sp, #16]
 8001e08:	46a2      	mov	sl, r4
 8001e0a:	e7d2      	b.n	8001db2 <_vfiprintf_r+0xc6>
 8001e0c:	9b03      	ldr	r3, [sp, #12]
 8001e0e:	1d19      	adds	r1, r3, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	9103      	str	r1, [sp, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bfbb      	ittet	lt
 8001e18:	425b      	neglt	r3, r3
 8001e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8001e1e:	9307      	strge	r3, [sp, #28]
 8001e20:	9307      	strlt	r3, [sp, #28]
 8001e22:	bfb8      	it	lt
 8001e24:	9204      	strlt	r2, [sp, #16]
 8001e26:	7823      	ldrb	r3, [r4, #0]
 8001e28:	2b2e      	cmp	r3, #46	; 0x2e
 8001e2a:	d10c      	bne.n	8001e46 <_vfiprintf_r+0x15a>
 8001e2c:	7863      	ldrb	r3, [r4, #1]
 8001e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8001e30:	d134      	bne.n	8001e9c <_vfiprintf_r+0x1b0>
 8001e32:	9b03      	ldr	r3, [sp, #12]
 8001e34:	1d1a      	adds	r2, r3, #4
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	9203      	str	r2, [sp, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bfb8      	it	lt
 8001e3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e42:	3402      	adds	r4, #2
 8001e44:	9305      	str	r3, [sp, #20]
 8001e46:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001f1c <_vfiprintf_r+0x230>
 8001e4a:	7821      	ldrb	r1, [r4, #0]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	4650      	mov	r0, sl
 8001e50:	f7fe f9c6 	bl	80001e0 <memchr>
 8001e54:	b138      	cbz	r0, 8001e66 <_vfiprintf_r+0x17a>
 8001e56:	9b04      	ldr	r3, [sp, #16]
 8001e58:	eba0 000a 	sub.w	r0, r0, sl
 8001e5c:	2240      	movs	r2, #64	; 0x40
 8001e5e:	4082      	lsls	r2, r0
 8001e60:	4313      	orrs	r3, r2
 8001e62:	3401      	adds	r4, #1
 8001e64:	9304      	str	r3, [sp, #16]
 8001e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e6a:	4829      	ldr	r0, [pc, #164]	; (8001f10 <_vfiprintf_r+0x224>)
 8001e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e70:	2206      	movs	r2, #6
 8001e72:	f7fe f9b5 	bl	80001e0 <memchr>
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d03f      	beq.n	8001efa <_vfiprintf_r+0x20e>
 8001e7a:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <_vfiprintf_r+0x228>)
 8001e7c:	bb1b      	cbnz	r3, 8001ec6 <_vfiprintf_r+0x1da>
 8001e7e:	9b03      	ldr	r3, [sp, #12]
 8001e80:	3307      	adds	r3, #7
 8001e82:	f023 0307 	bic.w	r3, r3, #7
 8001e86:	3308      	adds	r3, #8
 8001e88:	9303      	str	r3, [sp, #12]
 8001e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e8c:	443b      	add	r3, r7
 8001e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8001e90:	e768      	b.n	8001d64 <_vfiprintf_r+0x78>
 8001e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e96:	460c      	mov	r4, r1
 8001e98:	2001      	movs	r0, #1
 8001e9a:	e7a6      	b.n	8001dea <_vfiprintf_r+0xfe>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	3401      	adds	r4, #1
 8001ea0:	9305      	str	r3, [sp, #20]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 0c0a 	mov.w	ip, #10
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eae:	3a30      	subs	r2, #48	; 0x30
 8001eb0:	2a09      	cmp	r2, #9
 8001eb2:	d903      	bls.n	8001ebc <_vfiprintf_r+0x1d0>
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0c6      	beq.n	8001e46 <_vfiprintf_r+0x15a>
 8001eb8:	9105      	str	r1, [sp, #20]
 8001eba:	e7c4      	b.n	8001e46 <_vfiprintf_r+0x15a>
 8001ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e7f0      	b.n	8001ea8 <_vfiprintf_r+0x1bc>
 8001ec6:	ab03      	add	r3, sp, #12
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	462a      	mov	r2, r5
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <_vfiprintf_r+0x22c>)
 8001ece:	a904      	add	r1, sp, #16
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f3af 8000 	nop.w
 8001ed6:	4607      	mov	r7, r0
 8001ed8:	1c78      	adds	r0, r7, #1
 8001eda:	d1d6      	bne.n	8001e8a <_vfiprintf_r+0x19e>
 8001edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ede:	07d9      	lsls	r1, r3, #31
 8001ee0:	d405      	bmi.n	8001eee <_vfiprintf_r+0x202>
 8001ee2:	89ab      	ldrh	r3, [r5, #12]
 8001ee4:	059a      	lsls	r2, r3, #22
 8001ee6:	d402      	bmi.n	8001eee <_vfiprintf_r+0x202>
 8001ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001eea:	f7ff fddb 	bl	8001aa4 <__retarget_lock_release_recursive>
 8001eee:	89ab      	ldrh	r3, [r5, #12]
 8001ef0:	065b      	lsls	r3, r3, #25
 8001ef2:	f53f af1d 	bmi.w	8001d30 <_vfiprintf_r+0x44>
 8001ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ef8:	e71c      	b.n	8001d34 <_vfiprintf_r+0x48>
 8001efa:	ab03      	add	r3, sp, #12
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	462a      	mov	r2, r5
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <_vfiprintf_r+0x22c>)
 8001f02:	a904      	add	r1, sp, #16
 8001f04:	4630      	mov	r0, r6
 8001f06:	f000 f879 	bl	8001ffc <_printf_i>
 8001f0a:	e7e4      	b.n	8001ed6 <_vfiprintf_r+0x1ea>
 8001f0c:	080025a8 	.word	0x080025a8
 8001f10:	080025b2 	.word	0x080025b2
 8001f14:	00000000 	.word	0x00000000
 8001f18:	08001cc7 	.word	0x08001cc7
 8001f1c:	080025ae 	.word	0x080025ae

08001f20 <_printf_common>:
 8001f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f24:	4616      	mov	r6, r2
 8001f26:	4699      	mov	r9, r3
 8001f28:	688a      	ldr	r2, [r1, #8]
 8001f2a:	690b      	ldr	r3, [r1, #16]
 8001f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f30:	4293      	cmp	r3, r2
 8001f32:	bfb8      	it	lt
 8001f34:	4613      	movlt	r3, r2
 8001f36:	6033      	str	r3, [r6, #0]
 8001f38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f3c:	4607      	mov	r7, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	b10a      	cbz	r2, 8001f46 <_printf_common+0x26>
 8001f42:	3301      	adds	r3, #1
 8001f44:	6033      	str	r3, [r6, #0]
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	0699      	lsls	r1, r3, #26
 8001f4a:	bf42      	ittt	mi
 8001f4c:	6833      	ldrmi	r3, [r6, #0]
 8001f4e:	3302      	addmi	r3, #2
 8001f50:	6033      	strmi	r3, [r6, #0]
 8001f52:	6825      	ldr	r5, [r4, #0]
 8001f54:	f015 0506 	ands.w	r5, r5, #6
 8001f58:	d106      	bne.n	8001f68 <_printf_common+0x48>
 8001f5a:	f104 0a19 	add.w	sl, r4, #25
 8001f5e:	68e3      	ldr	r3, [r4, #12]
 8001f60:	6832      	ldr	r2, [r6, #0]
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	42ab      	cmp	r3, r5
 8001f66:	dc26      	bgt.n	8001fb6 <_printf_common+0x96>
 8001f68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f6c:	1e13      	subs	r3, r2, #0
 8001f6e:	6822      	ldr	r2, [r4, #0]
 8001f70:	bf18      	it	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	0692      	lsls	r2, r2, #26
 8001f76:	d42b      	bmi.n	8001fd0 <_printf_common+0xb0>
 8001f78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f7c:	4649      	mov	r1, r9
 8001f7e:	4638      	mov	r0, r7
 8001f80:	47c0      	blx	r8
 8001f82:	3001      	adds	r0, #1
 8001f84:	d01e      	beq.n	8001fc4 <_printf_common+0xa4>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	6922      	ldr	r2, [r4, #16]
 8001f8a:	f003 0306 	and.w	r3, r3, #6
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf02      	ittt	eq
 8001f92:	68e5      	ldreq	r5, [r4, #12]
 8001f94:	6833      	ldreq	r3, [r6, #0]
 8001f96:	1aed      	subeq	r5, r5, r3
 8001f98:	68a3      	ldr	r3, [r4, #8]
 8001f9a:	bf0c      	ite	eq
 8001f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fa0:	2500      	movne	r5, #0
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	bfc4      	itt	gt
 8001fa6:	1a9b      	subgt	r3, r3, r2
 8001fa8:	18ed      	addgt	r5, r5, r3
 8001faa:	2600      	movs	r6, #0
 8001fac:	341a      	adds	r4, #26
 8001fae:	42b5      	cmp	r5, r6
 8001fb0:	d11a      	bne.n	8001fe8 <_printf_common+0xc8>
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	e008      	b.n	8001fc8 <_printf_common+0xa8>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	4652      	mov	r2, sl
 8001fba:	4649      	mov	r1, r9
 8001fbc:	4638      	mov	r0, r7
 8001fbe:	47c0      	blx	r8
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	d103      	bne.n	8001fcc <_printf_common+0xac>
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fcc:	3501      	adds	r5, #1
 8001fce:	e7c6      	b.n	8001f5e <_printf_common+0x3e>
 8001fd0:	18e1      	adds	r1, r4, r3
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	2030      	movs	r0, #48	; 0x30
 8001fd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001fda:	4422      	add	r2, r4
 8001fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001fe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	e7c7      	b.n	8001f78 <_printf_common+0x58>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	4622      	mov	r2, r4
 8001fec:	4649      	mov	r1, r9
 8001fee:	4638      	mov	r0, r7
 8001ff0:	47c0      	blx	r8
 8001ff2:	3001      	adds	r0, #1
 8001ff4:	d0e6      	beq.n	8001fc4 <_printf_common+0xa4>
 8001ff6:	3601      	adds	r6, #1
 8001ff8:	e7d9      	b.n	8001fae <_printf_common+0x8e>
	...

08001ffc <_printf_i>:
 8001ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002000:	7e0f      	ldrb	r7, [r1, #24]
 8002002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002004:	2f78      	cmp	r7, #120	; 0x78
 8002006:	4691      	mov	r9, r2
 8002008:	4680      	mov	r8, r0
 800200a:	460c      	mov	r4, r1
 800200c:	469a      	mov	sl, r3
 800200e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002012:	d807      	bhi.n	8002024 <_printf_i+0x28>
 8002014:	2f62      	cmp	r7, #98	; 0x62
 8002016:	d80a      	bhi.n	800202e <_printf_i+0x32>
 8002018:	2f00      	cmp	r7, #0
 800201a:	f000 80d4 	beq.w	80021c6 <_printf_i+0x1ca>
 800201e:	2f58      	cmp	r7, #88	; 0x58
 8002020:	f000 80c0 	beq.w	80021a4 <_printf_i+0x1a8>
 8002024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800202c:	e03a      	b.n	80020a4 <_printf_i+0xa8>
 800202e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002032:	2b15      	cmp	r3, #21
 8002034:	d8f6      	bhi.n	8002024 <_printf_i+0x28>
 8002036:	a101      	add	r1, pc, #4	; (adr r1, 800203c <_printf_i+0x40>)
 8002038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800203c:	08002095 	.word	0x08002095
 8002040:	080020a9 	.word	0x080020a9
 8002044:	08002025 	.word	0x08002025
 8002048:	08002025 	.word	0x08002025
 800204c:	08002025 	.word	0x08002025
 8002050:	08002025 	.word	0x08002025
 8002054:	080020a9 	.word	0x080020a9
 8002058:	08002025 	.word	0x08002025
 800205c:	08002025 	.word	0x08002025
 8002060:	08002025 	.word	0x08002025
 8002064:	08002025 	.word	0x08002025
 8002068:	080021ad 	.word	0x080021ad
 800206c:	080020d5 	.word	0x080020d5
 8002070:	08002167 	.word	0x08002167
 8002074:	08002025 	.word	0x08002025
 8002078:	08002025 	.word	0x08002025
 800207c:	080021cf 	.word	0x080021cf
 8002080:	08002025 	.word	0x08002025
 8002084:	080020d5 	.word	0x080020d5
 8002088:	08002025 	.word	0x08002025
 800208c:	08002025 	.word	0x08002025
 8002090:	0800216f 	.word	0x0800216f
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	1d1a      	adds	r2, r3, #4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	602a      	str	r2, [r5, #0]
 800209c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020a4:	2301      	movs	r3, #1
 80020a6:	e09f      	b.n	80021e8 <_printf_i+0x1ec>
 80020a8:	6820      	ldr	r0, [r4, #0]
 80020aa:	682b      	ldr	r3, [r5, #0]
 80020ac:	0607      	lsls	r7, r0, #24
 80020ae:	f103 0104 	add.w	r1, r3, #4
 80020b2:	6029      	str	r1, [r5, #0]
 80020b4:	d501      	bpl.n	80020ba <_printf_i+0xbe>
 80020b6:	681e      	ldr	r6, [r3, #0]
 80020b8:	e003      	b.n	80020c2 <_printf_i+0xc6>
 80020ba:	0646      	lsls	r6, r0, #25
 80020bc:	d5fb      	bpl.n	80020b6 <_printf_i+0xba>
 80020be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80020c2:	2e00      	cmp	r6, #0
 80020c4:	da03      	bge.n	80020ce <_printf_i+0xd2>
 80020c6:	232d      	movs	r3, #45	; 0x2d
 80020c8:	4276      	negs	r6, r6
 80020ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020ce:	485a      	ldr	r0, [pc, #360]	; (8002238 <_printf_i+0x23c>)
 80020d0:	230a      	movs	r3, #10
 80020d2:	e012      	b.n	80020fa <_printf_i+0xfe>
 80020d4:	682b      	ldr	r3, [r5, #0]
 80020d6:	6820      	ldr	r0, [r4, #0]
 80020d8:	1d19      	adds	r1, r3, #4
 80020da:	6029      	str	r1, [r5, #0]
 80020dc:	0605      	lsls	r5, r0, #24
 80020de:	d501      	bpl.n	80020e4 <_printf_i+0xe8>
 80020e0:	681e      	ldr	r6, [r3, #0]
 80020e2:	e002      	b.n	80020ea <_printf_i+0xee>
 80020e4:	0641      	lsls	r1, r0, #25
 80020e6:	d5fb      	bpl.n	80020e0 <_printf_i+0xe4>
 80020e8:	881e      	ldrh	r6, [r3, #0]
 80020ea:	4853      	ldr	r0, [pc, #332]	; (8002238 <_printf_i+0x23c>)
 80020ec:	2f6f      	cmp	r7, #111	; 0x6f
 80020ee:	bf0c      	ite	eq
 80020f0:	2308      	moveq	r3, #8
 80020f2:	230a      	movne	r3, #10
 80020f4:	2100      	movs	r1, #0
 80020f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020fa:	6865      	ldr	r5, [r4, #4]
 80020fc:	60a5      	str	r5, [r4, #8]
 80020fe:	2d00      	cmp	r5, #0
 8002100:	bfa2      	ittt	ge
 8002102:	6821      	ldrge	r1, [r4, #0]
 8002104:	f021 0104 	bicge.w	r1, r1, #4
 8002108:	6021      	strge	r1, [r4, #0]
 800210a:	b90e      	cbnz	r6, 8002110 <_printf_i+0x114>
 800210c:	2d00      	cmp	r5, #0
 800210e:	d04b      	beq.n	80021a8 <_printf_i+0x1ac>
 8002110:	4615      	mov	r5, r2
 8002112:	fbb6 f1f3 	udiv	r1, r6, r3
 8002116:	fb03 6711 	mls	r7, r3, r1, r6
 800211a:	5dc7      	ldrb	r7, [r0, r7]
 800211c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002120:	4637      	mov	r7, r6
 8002122:	42bb      	cmp	r3, r7
 8002124:	460e      	mov	r6, r1
 8002126:	d9f4      	bls.n	8002112 <_printf_i+0x116>
 8002128:	2b08      	cmp	r3, #8
 800212a:	d10b      	bne.n	8002144 <_printf_i+0x148>
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	07de      	lsls	r6, r3, #31
 8002130:	d508      	bpl.n	8002144 <_printf_i+0x148>
 8002132:	6923      	ldr	r3, [r4, #16]
 8002134:	6861      	ldr	r1, [r4, #4]
 8002136:	4299      	cmp	r1, r3
 8002138:	bfde      	ittt	le
 800213a:	2330      	movle	r3, #48	; 0x30
 800213c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002140:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002144:	1b52      	subs	r2, r2, r5
 8002146:	6122      	str	r2, [r4, #16]
 8002148:	f8cd a000 	str.w	sl, [sp]
 800214c:	464b      	mov	r3, r9
 800214e:	aa03      	add	r2, sp, #12
 8002150:	4621      	mov	r1, r4
 8002152:	4640      	mov	r0, r8
 8002154:	f7ff fee4 	bl	8001f20 <_printf_common>
 8002158:	3001      	adds	r0, #1
 800215a:	d14a      	bne.n	80021f2 <_printf_i+0x1f6>
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	b004      	add	sp, #16
 8002162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	f043 0320 	orr.w	r3, r3, #32
 800216c:	6023      	str	r3, [r4, #0]
 800216e:	4833      	ldr	r0, [pc, #204]	; (800223c <_printf_i+0x240>)
 8002170:	2778      	movs	r7, #120	; 0x78
 8002172:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	6829      	ldr	r1, [r5, #0]
 800217a:	061f      	lsls	r7, r3, #24
 800217c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002180:	d402      	bmi.n	8002188 <_printf_i+0x18c>
 8002182:	065f      	lsls	r7, r3, #25
 8002184:	bf48      	it	mi
 8002186:	b2b6      	uxthmi	r6, r6
 8002188:	07df      	lsls	r7, r3, #31
 800218a:	bf48      	it	mi
 800218c:	f043 0320 	orrmi.w	r3, r3, #32
 8002190:	6029      	str	r1, [r5, #0]
 8002192:	bf48      	it	mi
 8002194:	6023      	strmi	r3, [r4, #0]
 8002196:	b91e      	cbnz	r6, 80021a0 <_printf_i+0x1a4>
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	f023 0320 	bic.w	r3, r3, #32
 800219e:	6023      	str	r3, [r4, #0]
 80021a0:	2310      	movs	r3, #16
 80021a2:	e7a7      	b.n	80020f4 <_printf_i+0xf8>
 80021a4:	4824      	ldr	r0, [pc, #144]	; (8002238 <_printf_i+0x23c>)
 80021a6:	e7e4      	b.n	8002172 <_printf_i+0x176>
 80021a8:	4615      	mov	r5, r2
 80021aa:	e7bd      	b.n	8002128 <_printf_i+0x12c>
 80021ac:	682b      	ldr	r3, [r5, #0]
 80021ae:	6826      	ldr	r6, [r4, #0]
 80021b0:	6961      	ldr	r1, [r4, #20]
 80021b2:	1d18      	adds	r0, r3, #4
 80021b4:	6028      	str	r0, [r5, #0]
 80021b6:	0635      	lsls	r5, r6, #24
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	d501      	bpl.n	80021c0 <_printf_i+0x1c4>
 80021bc:	6019      	str	r1, [r3, #0]
 80021be:	e002      	b.n	80021c6 <_printf_i+0x1ca>
 80021c0:	0670      	lsls	r0, r6, #25
 80021c2:	d5fb      	bpl.n	80021bc <_printf_i+0x1c0>
 80021c4:	8019      	strh	r1, [r3, #0]
 80021c6:	2300      	movs	r3, #0
 80021c8:	6123      	str	r3, [r4, #16]
 80021ca:	4615      	mov	r5, r2
 80021cc:	e7bc      	b.n	8002148 <_printf_i+0x14c>
 80021ce:	682b      	ldr	r3, [r5, #0]
 80021d0:	1d1a      	adds	r2, r3, #4
 80021d2:	602a      	str	r2, [r5, #0]
 80021d4:	681d      	ldr	r5, [r3, #0]
 80021d6:	6862      	ldr	r2, [r4, #4]
 80021d8:	2100      	movs	r1, #0
 80021da:	4628      	mov	r0, r5
 80021dc:	f7fe f800 	bl	80001e0 <memchr>
 80021e0:	b108      	cbz	r0, 80021e6 <_printf_i+0x1ea>
 80021e2:	1b40      	subs	r0, r0, r5
 80021e4:	6060      	str	r0, [r4, #4]
 80021e6:	6863      	ldr	r3, [r4, #4]
 80021e8:	6123      	str	r3, [r4, #16]
 80021ea:	2300      	movs	r3, #0
 80021ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021f0:	e7aa      	b.n	8002148 <_printf_i+0x14c>
 80021f2:	6923      	ldr	r3, [r4, #16]
 80021f4:	462a      	mov	r2, r5
 80021f6:	4649      	mov	r1, r9
 80021f8:	4640      	mov	r0, r8
 80021fa:	47d0      	blx	sl
 80021fc:	3001      	adds	r0, #1
 80021fe:	d0ad      	beq.n	800215c <_printf_i+0x160>
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	079b      	lsls	r3, r3, #30
 8002204:	d413      	bmi.n	800222e <_printf_i+0x232>
 8002206:	68e0      	ldr	r0, [r4, #12]
 8002208:	9b03      	ldr	r3, [sp, #12]
 800220a:	4298      	cmp	r0, r3
 800220c:	bfb8      	it	lt
 800220e:	4618      	movlt	r0, r3
 8002210:	e7a6      	b.n	8002160 <_printf_i+0x164>
 8002212:	2301      	movs	r3, #1
 8002214:	4632      	mov	r2, r6
 8002216:	4649      	mov	r1, r9
 8002218:	4640      	mov	r0, r8
 800221a:	47d0      	blx	sl
 800221c:	3001      	adds	r0, #1
 800221e:	d09d      	beq.n	800215c <_printf_i+0x160>
 8002220:	3501      	adds	r5, #1
 8002222:	68e3      	ldr	r3, [r4, #12]
 8002224:	9903      	ldr	r1, [sp, #12]
 8002226:	1a5b      	subs	r3, r3, r1
 8002228:	42ab      	cmp	r3, r5
 800222a:	dcf2      	bgt.n	8002212 <_printf_i+0x216>
 800222c:	e7eb      	b.n	8002206 <_printf_i+0x20a>
 800222e:	2500      	movs	r5, #0
 8002230:	f104 0619 	add.w	r6, r4, #25
 8002234:	e7f5      	b.n	8002222 <_printf_i+0x226>
 8002236:	bf00      	nop
 8002238:	080025b9 	.word	0x080025b9
 800223c:	080025ca 	.word	0x080025ca

08002240 <__sflush_r>:
 8002240:	898a      	ldrh	r2, [r1, #12]
 8002242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002246:	4605      	mov	r5, r0
 8002248:	0710      	lsls	r0, r2, #28
 800224a:	460c      	mov	r4, r1
 800224c:	d458      	bmi.n	8002300 <__sflush_r+0xc0>
 800224e:	684b      	ldr	r3, [r1, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	dc05      	bgt.n	8002260 <__sflush_r+0x20>
 8002254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	dc02      	bgt.n	8002260 <__sflush_r+0x20>
 800225a:	2000      	movs	r0, #0
 800225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002262:	2e00      	cmp	r6, #0
 8002264:	d0f9      	beq.n	800225a <__sflush_r+0x1a>
 8002266:	2300      	movs	r3, #0
 8002268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800226c:	682f      	ldr	r7, [r5, #0]
 800226e:	6a21      	ldr	r1, [r4, #32]
 8002270:	602b      	str	r3, [r5, #0]
 8002272:	d032      	beq.n	80022da <__sflush_r+0x9a>
 8002274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002276:	89a3      	ldrh	r3, [r4, #12]
 8002278:	075a      	lsls	r2, r3, #29
 800227a:	d505      	bpl.n	8002288 <__sflush_r+0x48>
 800227c:	6863      	ldr	r3, [r4, #4]
 800227e:	1ac0      	subs	r0, r0, r3
 8002280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002282:	b10b      	cbz	r3, 8002288 <__sflush_r+0x48>
 8002284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002286:	1ac0      	subs	r0, r0, r3
 8002288:	2300      	movs	r3, #0
 800228a:	4602      	mov	r2, r0
 800228c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800228e:	6a21      	ldr	r1, [r4, #32]
 8002290:	4628      	mov	r0, r5
 8002292:	47b0      	blx	r6
 8002294:	1c43      	adds	r3, r0, #1
 8002296:	89a3      	ldrh	r3, [r4, #12]
 8002298:	d106      	bne.n	80022a8 <__sflush_r+0x68>
 800229a:	6829      	ldr	r1, [r5, #0]
 800229c:	291d      	cmp	r1, #29
 800229e:	d82b      	bhi.n	80022f8 <__sflush_r+0xb8>
 80022a0:	4a29      	ldr	r2, [pc, #164]	; (8002348 <__sflush_r+0x108>)
 80022a2:	410a      	asrs	r2, r1
 80022a4:	07d6      	lsls	r6, r2, #31
 80022a6:	d427      	bmi.n	80022f8 <__sflush_r+0xb8>
 80022a8:	2200      	movs	r2, #0
 80022aa:	6062      	str	r2, [r4, #4]
 80022ac:	04d9      	lsls	r1, r3, #19
 80022ae:	6922      	ldr	r2, [r4, #16]
 80022b0:	6022      	str	r2, [r4, #0]
 80022b2:	d504      	bpl.n	80022be <__sflush_r+0x7e>
 80022b4:	1c42      	adds	r2, r0, #1
 80022b6:	d101      	bne.n	80022bc <__sflush_r+0x7c>
 80022b8:	682b      	ldr	r3, [r5, #0]
 80022ba:	b903      	cbnz	r3, 80022be <__sflush_r+0x7e>
 80022bc:	6560      	str	r0, [r4, #84]	; 0x54
 80022be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022c0:	602f      	str	r7, [r5, #0]
 80022c2:	2900      	cmp	r1, #0
 80022c4:	d0c9      	beq.n	800225a <__sflush_r+0x1a>
 80022c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022ca:	4299      	cmp	r1, r3
 80022cc:	d002      	beq.n	80022d4 <__sflush_r+0x94>
 80022ce:	4628      	mov	r0, r5
 80022d0:	f7ff fbea 	bl	8001aa8 <_free_r>
 80022d4:	2000      	movs	r0, #0
 80022d6:	6360      	str	r0, [r4, #52]	; 0x34
 80022d8:	e7c0      	b.n	800225c <__sflush_r+0x1c>
 80022da:	2301      	movs	r3, #1
 80022dc:	4628      	mov	r0, r5
 80022de:	47b0      	blx	r6
 80022e0:	1c41      	adds	r1, r0, #1
 80022e2:	d1c8      	bne.n	8002276 <__sflush_r+0x36>
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0c5      	beq.n	8002276 <__sflush_r+0x36>
 80022ea:	2b1d      	cmp	r3, #29
 80022ec:	d001      	beq.n	80022f2 <__sflush_r+0xb2>
 80022ee:	2b16      	cmp	r3, #22
 80022f0:	d101      	bne.n	80022f6 <__sflush_r+0xb6>
 80022f2:	602f      	str	r7, [r5, #0]
 80022f4:	e7b1      	b.n	800225a <__sflush_r+0x1a>
 80022f6:	89a3      	ldrh	r3, [r4, #12]
 80022f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022fc:	81a3      	strh	r3, [r4, #12]
 80022fe:	e7ad      	b.n	800225c <__sflush_r+0x1c>
 8002300:	690f      	ldr	r7, [r1, #16]
 8002302:	2f00      	cmp	r7, #0
 8002304:	d0a9      	beq.n	800225a <__sflush_r+0x1a>
 8002306:	0793      	lsls	r3, r2, #30
 8002308:	680e      	ldr	r6, [r1, #0]
 800230a:	bf08      	it	eq
 800230c:	694b      	ldreq	r3, [r1, #20]
 800230e:	600f      	str	r7, [r1, #0]
 8002310:	bf18      	it	ne
 8002312:	2300      	movne	r3, #0
 8002314:	eba6 0807 	sub.w	r8, r6, r7
 8002318:	608b      	str	r3, [r1, #8]
 800231a:	f1b8 0f00 	cmp.w	r8, #0
 800231e:	dd9c      	ble.n	800225a <__sflush_r+0x1a>
 8002320:	6a21      	ldr	r1, [r4, #32]
 8002322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002324:	4643      	mov	r3, r8
 8002326:	463a      	mov	r2, r7
 8002328:	4628      	mov	r0, r5
 800232a:	47b0      	blx	r6
 800232c:	2800      	cmp	r0, #0
 800232e:	dc06      	bgt.n	800233e <__sflush_r+0xfe>
 8002330:	89a3      	ldrh	r3, [r4, #12]
 8002332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002336:	81a3      	strh	r3, [r4, #12]
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	e78e      	b.n	800225c <__sflush_r+0x1c>
 800233e:	4407      	add	r7, r0
 8002340:	eba8 0800 	sub.w	r8, r8, r0
 8002344:	e7e9      	b.n	800231a <__sflush_r+0xda>
 8002346:	bf00      	nop
 8002348:	dfbffffe 	.word	0xdfbffffe

0800234c <_fflush_r>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	690b      	ldr	r3, [r1, #16]
 8002350:	4605      	mov	r5, r0
 8002352:	460c      	mov	r4, r1
 8002354:	b913      	cbnz	r3, 800235c <_fflush_r+0x10>
 8002356:	2500      	movs	r5, #0
 8002358:	4628      	mov	r0, r5
 800235a:	bd38      	pop	{r3, r4, r5, pc}
 800235c:	b118      	cbz	r0, 8002366 <_fflush_r+0x1a>
 800235e:	6a03      	ldr	r3, [r0, #32]
 8002360:	b90b      	cbnz	r3, 8002366 <_fflush_r+0x1a>
 8002362:	f7ff f9a9 	bl	80016b8 <__sinit>
 8002366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f3      	beq.n	8002356 <_fflush_r+0xa>
 800236e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002370:	07d0      	lsls	r0, r2, #31
 8002372:	d404      	bmi.n	800237e <_fflush_r+0x32>
 8002374:	0599      	lsls	r1, r3, #22
 8002376:	d402      	bmi.n	800237e <_fflush_r+0x32>
 8002378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800237a:	f7ff fb92 	bl	8001aa2 <__retarget_lock_acquire_recursive>
 800237e:	4628      	mov	r0, r5
 8002380:	4621      	mov	r1, r4
 8002382:	f7ff ff5d 	bl	8002240 <__sflush_r>
 8002386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002388:	07da      	lsls	r2, r3, #31
 800238a:	4605      	mov	r5, r0
 800238c:	d4e4      	bmi.n	8002358 <_fflush_r+0xc>
 800238e:	89a3      	ldrh	r3, [r4, #12]
 8002390:	059b      	lsls	r3, r3, #22
 8002392:	d4e1      	bmi.n	8002358 <_fflush_r+0xc>
 8002394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002396:	f7ff fb85 	bl	8001aa4 <__retarget_lock_release_recursive>
 800239a:	e7dd      	b.n	8002358 <_fflush_r+0xc>

0800239c <__swhatbuf_r>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	460c      	mov	r4, r1
 80023a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023a4:	2900      	cmp	r1, #0
 80023a6:	b096      	sub	sp, #88	; 0x58
 80023a8:	4615      	mov	r5, r2
 80023aa:	461e      	mov	r6, r3
 80023ac:	da0d      	bge.n	80023ca <__swhatbuf_r+0x2e>
 80023ae:	89a3      	ldrh	r3, [r4, #12]
 80023b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	bf0c      	ite	eq
 80023ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80023be:	2340      	movne	r3, #64	; 0x40
 80023c0:	2000      	movs	r0, #0
 80023c2:	6031      	str	r1, [r6, #0]
 80023c4:	602b      	str	r3, [r5, #0]
 80023c6:	b016      	add	sp, #88	; 0x58
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
 80023ca:	466a      	mov	r2, sp
 80023cc:	f000 f848 	bl	8002460 <_fstat_r>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	dbec      	blt.n	80023ae <__swhatbuf_r+0x12>
 80023d4:	9901      	ldr	r1, [sp, #4]
 80023d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80023da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80023de:	4259      	negs	r1, r3
 80023e0:	4159      	adcs	r1, r3
 80023e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e6:	e7eb      	b.n	80023c0 <__swhatbuf_r+0x24>

080023e8 <__smakebuf_r>:
 80023e8:	898b      	ldrh	r3, [r1, #12]
 80023ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023ec:	079d      	lsls	r5, r3, #30
 80023ee:	4606      	mov	r6, r0
 80023f0:	460c      	mov	r4, r1
 80023f2:	d507      	bpl.n	8002404 <__smakebuf_r+0x1c>
 80023f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	6123      	str	r3, [r4, #16]
 80023fc:	2301      	movs	r3, #1
 80023fe:	6163      	str	r3, [r4, #20]
 8002400:	b002      	add	sp, #8
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	ab01      	add	r3, sp, #4
 8002406:	466a      	mov	r2, sp
 8002408:	f7ff ffc8 	bl	800239c <__swhatbuf_r>
 800240c:	9900      	ldr	r1, [sp, #0]
 800240e:	4605      	mov	r5, r0
 8002410:	4630      	mov	r0, r6
 8002412:	f7ff fbb5 	bl	8001b80 <_malloc_r>
 8002416:	b948      	cbnz	r0, 800242c <__smakebuf_r+0x44>
 8002418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800241c:	059a      	lsls	r2, r3, #22
 800241e:	d4ef      	bmi.n	8002400 <__smakebuf_r+0x18>
 8002420:	f023 0303 	bic.w	r3, r3, #3
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	81a3      	strh	r3, [r4, #12]
 800242a:	e7e3      	b.n	80023f4 <__smakebuf_r+0xc>
 800242c:	89a3      	ldrh	r3, [r4, #12]
 800242e:	6020      	str	r0, [r4, #0]
 8002430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002434:	81a3      	strh	r3, [r4, #12]
 8002436:	9b00      	ldr	r3, [sp, #0]
 8002438:	6163      	str	r3, [r4, #20]
 800243a:	9b01      	ldr	r3, [sp, #4]
 800243c:	6120      	str	r0, [r4, #16]
 800243e:	b15b      	cbz	r3, 8002458 <__smakebuf_r+0x70>
 8002440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002444:	4630      	mov	r0, r6
 8002446:	f000 f81d 	bl	8002484 <_isatty_r>
 800244a:	b128      	cbz	r0, 8002458 <__smakebuf_r+0x70>
 800244c:	89a3      	ldrh	r3, [r4, #12]
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	81a3      	strh	r3, [r4, #12]
 8002458:	89a3      	ldrh	r3, [r4, #12]
 800245a:	431d      	orrs	r5, r3
 800245c:	81a5      	strh	r5, [r4, #12]
 800245e:	e7cf      	b.n	8002400 <__smakebuf_r+0x18>

08002460 <_fstat_r>:
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	4d07      	ldr	r5, [pc, #28]	; (8002480 <_fstat_r+0x20>)
 8002464:	2300      	movs	r3, #0
 8002466:	4604      	mov	r4, r0
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	602b      	str	r3, [r5, #0]
 800246e:	f7fe f8ec 	bl	800064a <_fstat>
 8002472:	1c43      	adds	r3, r0, #1
 8002474:	d102      	bne.n	800247c <_fstat_r+0x1c>
 8002476:	682b      	ldr	r3, [r5, #0]
 8002478:	b103      	cbz	r3, 800247c <_fstat_r+0x1c>
 800247a:	6023      	str	r3, [r4, #0]
 800247c:	bd38      	pop	{r3, r4, r5, pc}
 800247e:	bf00      	nop
 8002480:	2000020c 	.word	0x2000020c

08002484 <_isatty_r>:
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	4d06      	ldr	r5, [pc, #24]	; (80024a0 <_isatty_r+0x1c>)
 8002488:	2300      	movs	r3, #0
 800248a:	4604      	mov	r4, r0
 800248c:	4608      	mov	r0, r1
 800248e:	602b      	str	r3, [r5, #0]
 8002490:	f7fe f8eb 	bl	800066a <_isatty>
 8002494:	1c43      	adds	r3, r0, #1
 8002496:	d102      	bne.n	800249e <_isatty_r+0x1a>
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	b103      	cbz	r3, 800249e <_isatty_r+0x1a>
 800249c:	6023      	str	r3, [r4, #0]
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	2000020c 	.word	0x2000020c

080024a4 <_sbrk_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	4d06      	ldr	r5, [pc, #24]	; (80024c0 <_sbrk_r+0x1c>)
 80024a8:	2300      	movs	r3, #0
 80024aa:	4604      	mov	r4, r0
 80024ac:	4608      	mov	r0, r1
 80024ae:	602b      	str	r3, [r5, #0]
 80024b0:	f7fe f8f4 	bl	800069c <_sbrk>
 80024b4:	1c43      	adds	r3, r0, #1
 80024b6:	d102      	bne.n	80024be <_sbrk_r+0x1a>
 80024b8:	682b      	ldr	r3, [r5, #0]
 80024ba:	b103      	cbz	r3, 80024be <_sbrk_r+0x1a>
 80024bc:	6023      	str	r3, [r4, #0]
 80024be:	bd38      	pop	{r3, r4, r5, pc}
 80024c0:	2000020c 	.word	0x2000020c

080024c4 <_init>:
 80024c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c6:	bf00      	nop
 80024c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ca:	bc08      	pop	{r3}
 80024cc:	469e      	mov	lr, r3
 80024ce:	4770      	bx	lr

080024d0 <_fini>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr
